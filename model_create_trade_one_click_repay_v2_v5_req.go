/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeOneClickRepayV2V5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeOneClickRepayV2V5Req{}

// CreateTradeOneClickRepayV2V5Req struct for CreateTradeOneClickRepayV2V5Req
type CreateTradeOneClickRepayV2V5Req struct {
	// Debt currency
	DebtCcy string `json:"debtCcy"`
	// Repay currency list, e.g. [\"USDC\",\"BTC\"]  The priority of currency to repay is consistent with the order in the array. (The first item has the highest priority)
	RepayCcyList []string `json:"repayCcyList"`
}

type _CreateTradeOneClickRepayV2V5Req CreateTradeOneClickRepayV2V5Req

// NewCreateTradeOneClickRepayV2V5Req instantiates a new CreateTradeOneClickRepayV2V5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeOneClickRepayV2V5Req(debtCcy string, repayCcyList []string) *CreateTradeOneClickRepayV2V5Req {
	this := CreateTradeOneClickRepayV2V5Req{}
	this.DebtCcy = debtCcy
	this.RepayCcyList = repayCcyList
	return &this
}

// NewCreateTradeOneClickRepayV2V5ReqWithDefaults instantiates a new CreateTradeOneClickRepayV2V5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeOneClickRepayV2V5ReqWithDefaults() *CreateTradeOneClickRepayV2V5Req {
	this := CreateTradeOneClickRepayV2V5Req{}
	var debtCcy string = ""
	this.DebtCcy = debtCcy
	return &this
}

// GetDebtCcy returns the DebtCcy field value
func (o *CreateTradeOneClickRepayV2V5Req) GetDebtCcy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebtCcy
}

// GetDebtCcyOk returns a tuple with the DebtCcy field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOneClickRepayV2V5Req) GetDebtCcyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebtCcy, true
}

// SetDebtCcy sets field value
func (o *CreateTradeOneClickRepayV2V5Req) SetDebtCcy(v string) {
	o.DebtCcy = v
}

// GetRepayCcyList returns the RepayCcyList field value
func (o *CreateTradeOneClickRepayV2V5Req) GetRepayCcyList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RepayCcyList
}

// GetRepayCcyListOk returns a tuple with the RepayCcyList field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOneClickRepayV2V5Req) GetRepayCcyListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepayCcyList, true
}

// SetRepayCcyList sets field value
func (o *CreateTradeOneClickRepayV2V5Req) SetRepayCcyList(v []string) {
	o.RepayCcyList = v
}

func (o CreateTradeOneClickRepayV2V5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeOneClickRepayV2V5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["debtCcy"] = o.DebtCcy
	toSerialize["repayCcyList"] = o.RepayCcyList
	return toSerialize, nil
}

func (o *CreateTradeOneClickRepayV2V5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"debtCcy",
		"repayCcyList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeOneClickRepayV2V5Req := _CreateTradeOneClickRepayV2V5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeOneClickRepayV2V5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeOneClickRepayV2V5Req(varCreateTradeOneClickRepayV2V5Req)

	return err
}

type NullableCreateTradeOneClickRepayV2V5Req struct {
	value *CreateTradeOneClickRepayV2V5Req
	isSet bool
}

func (v NullableCreateTradeOneClickRepayV2V5Req) Get() *CreateTradeOneClickRepayV2V5Req {
	return v.value
}

func (v *NullableCreateTradeOneClickRepayV2V5Req) Set(val *CreateTradeOneClickRepayV2V5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeOneClickRepayV2V5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeOneClickRepayV2V5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeOneClickRepayV2V5Req(val *CreateTradeOneClickRepayV2V5Req) *NullableCreateTradeOneClickRepayV2V5Req {
	return &NullableCreateTradeOneClickRepayV2V5Req{value: val, isSet: true}
}

func (v NullableCreateTradeOneClickRepayV2V5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeOneClickRepayV2V5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


