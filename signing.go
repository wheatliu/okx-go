/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"fmt"
	"io"
	"net/http"
	"time"
	"encoding/base64"
)

type KeyType string

const (
	KeyTypeHMAC KeyType = "HMAC"
)

func NewAuth(apiKey, passPhrase string) *Auth {
	return &Auth{
		APIKey:     apiKey,
		Passphrase: passPhrase,
		KeyType:    KeyTypeHMAC,
	}
}

// Auth provides Binance API key based authentication to a request passed via context using ContextBinanceAuth
type Auth struct {
	APIKey     string
	KeyType    KeyType
	Passphrase string
	secretKey  string
}

func (b *Auth) SetSecretKey(secretKey string) {
	b.secretKey = secretKey
}

// ContextWithValue validates the Auth configuration parameters and returns a context
// suitable for HTTP signature. An error is returned if the Auth configuration parameters
// are invalid.
func (b *Auth) ContextWithValue(ctx context.Context) (context.Context, error) {
	return context.WithValue(ctx, ContextOKXAuth, *b), nil
}

func (b *Auth) Sign(r *http.Request) (err error) {
	requestURI := r.URL.RequestURI()
	format := "2006-01-02T15:04:05.999Z07:00"
	now := time.Now().UTC().Format(format)
	var dataToSign []byte = []byte(now)
	var bodyData []byte = []byte{}

	if r.Body != nil {
		reader, err := r.GetBody()
		if err != nil {
			return fmt.Errorf("failed to get request body: %s", err)
		}
		bodyData, err = io.ReadAll(reader)
		if err != nil {
			return fmt.Errorf("failed to read request body: %s", err)
		}
	}
	dataToSign = append(dataToSign, []byte(r.Method)...)
	dataToSign = append(dataToSign, []byte(requestURI)...)
	if len(bodyData) > 0 {
		dataToSign = append(dataToSign, bodyData...)
	}

	var signature string

	mac := hmac.New(sha256.New, []byte(b.secretKey))
	_, err = mac.Write(dataToSign)
	if err != nil {
		return err
	}
	signature = base64.StdEncoding.EncodeToString(mac.Sum(nil))

	// Make sure signature is added to the end of the query string
	r.Header.Set("OK-ACCESS-SIGN", signature)
	r.Header.Set("OK-ACCESS-TIMESTAMP", now)
	r.Header.Set("OK-ACCESS-KEY", b.APIKey)
	r.Header.Set("OK-ACCESS-PASSPHRASE", b.Passphrase)
	return nil
}
