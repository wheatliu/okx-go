/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
)

// checks if the GetRfqMmpConfigV5RespData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRfqMmpConfigV5RespData{}

// GetRfqMmpConfigV5RespData struct for GetRfqMmpConfigV5RespData
type GetRfqMmpConfigV5RespData struct {
	// Limit in number of execution attempts
	CountLimit *string `json:"countLimit,omitempty"`
	// Frozen period (ms). If it is \"0\", the trade will remain frozen until manually reset and `mmpFrozenUntil` will be \"\".
	FrozenInterval *string `json:"frozenInterval,omitempty"`
	// Whether MMP is currently triggered. `true` or `false`
	MmpFrozen *bool `json:"mmpFrozen,omitempty"`
	// If frozenInterval is not \"0\" and mmpFrozen = True, it is the time interval (in ms) when MMP is no longer triggered, otherwise \"\"
	MmpFrozenUntil *string `json:"mmpFrozenUntil,omitempty"`
	// Time window (ms). MMP interval where monitoring is done  \"0\" means MMP is diabled
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// NewGetRfqMmpConfigV5RespData instantiates a new GetRfqMmpConfigV5RespData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRfqMmpConfigV5RespData() *GetRfqMmpConfigV5RespData {
	this := GetRfqMmpConfigV5RespData{}
	var countLimit string = ""
	this.CountLimit = &countLimit
	var frozenInterval string = ""
	this.FrozenInterval = &frozenInterval
	var mmpFrozenUntil string = ""
	this.MmpFrozenUntil = &mmpFrozenUntil
	var timeInterval string = ""
	this.TimeInterval = &timeInterval
	return &this
}

// NewGetRfqMmpConfigV5RespDataWithDefaults instantiates a new GetRfqMmpConfigV5RespData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRfqMmpConfigV5RespDataWithDefaults() *GetRfqMmpConfigV5RespData {
	this := GetRfqMmpConfigV5RespData{}
	var countLimit string = ""
	this.CountLimit = &countLimit
	var frozenInterval string = ""
	this.FrozenInterval = &frozenInterval
	var mmpFrozenUntil string = ""
	this.MmpFrozenUntil = &mmpFrozenUntil
	var timeInterval string = ""
	this.TimeInterval = &timeInterval
	return &this
}

// GetCountLimit returns the CountLimit field value if set, zero value otherwise.
func (o *GetRfqMmpConfigV5RespData) GetCountLimit() string {
	if o == nil || IsNil(o.CountLimit) {
		var ret string
		return ret
	}
	return *o.CountLimit
}

// GetCountLimitOk returns a tuple with the CountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRfqMmpConfigV5RespData) GetCountLimitOk() (*string, bool) {
	if o == nil || IsNil(o.CountLimit) {
		return nil, false
	}
	return o.CountLimit, true
}

// HasCountLimit returns a boolean if a field has been set.
func (o *GetRfqMmpConfigV5RespData) HasCountLimit() bool {
	if o != nil && !IsNil(o.CountLimit) {
		return true
	}

	return false
}

// SetCountLimit gets a reference to the given string and assigns it to the CountLimit field.
func (o *GetRfqMmpConfigV5RespData) SetCountLimit(v string) {
	o.CountLimit = &v
}

// GetFrozenInterval returns the FrozenInterval field value if set, zero value otherwise.
func (o *GetRfqMmpConfigV5RespData) GetFrozenInterval() string {
	if o == nil || IsNil(o.FrozenInterval) {
		var ret string
		return ret
	}
	return *o.FrozenInterval
}

// GetFrozenIntervalOk returns a tuple with the FrozenInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRfqMmpConfigV5RespData) GetFrozenIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.FrozenInterval) {
		return nil, false
	}
	return o.FrozenInterval, true
}

// HasFrozenInterval returns a boolean if a field has been set.
func (o *GetRfqMmpConfigV5RespData) HasFrozenInterval() bool {
	if o != nil && !IsNil(o.FrozenInterval) {
		return true
	}

	return false
}

// SetFrozenInterval gets a reference to the given string and assigns it to the FrozenInterval field.
func (o *GetRfqMmpConfigV5RespData) SetFrozenInterval(v string) {
	o.FrozenInterval = &v
}

// GetMmpFrozen returns the MmpFrozen field value if set, zero value otherwise.
func (o *GetRfqMmpConfigV5RespData) GetMmpFrozen() bool {
	if o == nil || IsNil(o.MmpFrozen) {
		var ret bool
		return ret
	}
	return *o.MmpFrozen
}

// GetMmpFrozenOk returns a tuple with the MmpFrozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRfqMmpConfigV5RespData) GetMmpFrozenOk() (*bool, bool) {
	if o == nil || IsNil(o.MmpFrozen) {
		return nil, false
	}
	return o.MmpFrozen, true
}

// HasMmpFrozen returns a boolean if a field has been set.
func (o *GetRfqMmpConfigV5RespData) HasMmpFrozen() bool {
	if o != nil && !IsNil(o.MmpFrozen) {
		return true
	}

	return false
}

// SetMmpFrozen gets a reference to the given bool and assigns it to the MmpFrozen field.
func (o *GetRfqMmpConfigV5RespData) SetMmpFrozen(v bool) {
	o.MmpFrozen = &v
}

// GetMmpFrozenUntil returns the MmpFrozenUntil field value if set, zero value otherwise.
func (o *GetRfqMmpConfigV5RespData) GetMmpFrozenUntil() string {
	if o == nil || IsNil(o.MmpFrozenUntil) {
		var ret string
		return ret
	}
	return *o.MmpFrozenUntil
}

// GetMmpFrozenUntilOk returns a tuple with the MmpFrozenUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRfqMmpConfigV5RespData) GetMmpFrozenUntilOk() (*string, bool) {
	if o == nil || IsNil(o.MmpFrozenUntil) {
		return nil, false
	}
	return o.MmpFrozenUntil, true
}

// HasMmpFrozenUntil returns a boolean if a field has been set.
func (o *GetRfqMmpConfigV5RespData) HasMmpFrozenUntil() bool {
	if o != nil && !IsNil(o.MmpFrozenUntil) {
		return true
	}

	return false
}

// SetMmpFrozenUntil gets a reference to the given string and assigns it to the MmpFrozenUntil field.
func (o *GetRfqMmpConfigV5RespData) SetMmpFrozenUntil(v string) {
	o.MmpFrozenUntil = &v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *GetRfqMmpConfigV5RespData) GetTimeInterval() string {
	if o == nil || IsNil(o.TimeInterval) {
		var ret string
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRfqMmpConfigV5RespData) GetTimeIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *GetRfqMmpConfigV5RespData) HasTimeInterval() bool {
	if o != nil && !IsNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given string and assigns it to the TimeInterval field.
func (o *GetRfqMmpConfigV5RespData) SetTimeInterval(v string) {
	o.TimeInterval = &v
}

func (o GetRfqMmpConfigV5RespData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRfqMmpConfigV5RespData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountLimit) {
		toSerialize["countLimit"] = o.CountLimit
	}
	if !IsNil(o.FrozenInterval) {
		toSerialize["frozenInterval"] = o.FrozenInterval
	}
	if !IsNil(o.MmpFrozen) {
		toSerialize["mmpFrozen"] = o.MmpFrozen
	}
	if !IsNil(o.MmpFrozenUntil) {
		toSerialize["mmpFrozenUntil"] = o.MmpFrozenUntil
	}
	if !IsNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	return toSerialize, nil
}

type NullableGetRfqMmpConfigV5RespData struct {
	value *GetRfqMmpConfigV5RespData
	isSet bool
}

func (v NullableGetRfqMmpConfigV5RespData) Get() *GetRfqMmpConfigV5RespData {
	return v.value
}

func (v *NullableGetRfqMmpConfigV5RespData) Set(val *GetRfqMmpConfigV5RespData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRfqMmpConfigV5RespData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRfqMmpConfigV5RespData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRfqMmpConfigV5RespData(val *GetRfqMmpConfigV5RespData) *NullableGetRfqMmpConfigV5RespData {
	return &NullableGetRfqMmpConfigV5RespData{value: val, isSet: true}
}

func (v NullableGetRfqMmpConfigV5RespData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRfqMmpConfigV5RespData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


