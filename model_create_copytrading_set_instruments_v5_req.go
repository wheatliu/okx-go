/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCopytradingSetInstrumentsV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCopytradingSetInstrumentsV5Req{}

// CreateCopytradingSetInstrumentsV5Req struct for CreateCopytradingSetInstrumentsV5Req
type CreateCopytradingSetInstrumentsV5Req struct {
	// Instrument ID, e.g. BTC-USDT-SWAP. If there are multiple instruments, separate them with commas.
	InstId string `json:"instId"`
	// Instrument type  `SPOT`  `SWAP`, the default value
	InstType *string `json:"instType,omitempty"`
}

type _CreateCopytradingSetInstrumentsV5Req CreateCopytradingSetInstrumentsV5Req

// NewCreateCopytradingSetInstrumentsV5Req instantiates a new CreateCopytradingSetInstrumentsV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCopytradingSetInstrumentsV5Req(instId string) *CreateCopytradingSetInstrumentsV5Req {
	this := CreateCopytradingSetInstrumentsV5Req{}
	this.InstId = instId
	var instType string = ""
	this.InstType = &instType
	return &this
}

// NewCreateCopytradingSetInstrumentsV5ReqWithDefaults instantiates a new CreateCopytradingSetInstrumentsV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCopytradingSetInstrumentsV5ReqWithDefaults() *CreateCopytradingSetInstrumentsV5Req {
	this := CreateCopytradingSetInstrumentsV5Req{}
	var instId string = ""
	this.InstId = instId
	var instType string = ""
	this.InstType = &instType
	return &this
}

// GetInstId returns the InstId field value
func (o *CreateCopytradingSetInstrumentsV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateCopytradingSetInstrumentsV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateCopytradingSetInstrumentsV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetInstType returns the InstType field value if set, zero value otherwise.
func (o *CreateCopytradingSetInstrumentsV5Req) GetInstType() string {
	if o == nil || IsNil(o.InstType) {
		var ret string
		return ret
	}
	return *o.InstType
}

// GetInstTypeOk returns a tuple with the InstType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCopytradingSetInstrumentsV5Req) GetInstTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstType) {
		return nil, false
	}
	return o.InstType, true
}

// HasInstType returns a boolean if a field has been set.
func (o *CreateCopytradingSetInstrumentsV5Req) HasInstType() bool {
	if o != nil && !IsNil(o.InstType) {
		return true
	}

	return false
}

// SetInstType gets a reference to the given string and assigns it to the InstType field.
func (o *CreateCopytradingSetInstrumentsV5Req) SetInstType(v string) {
	o.InstType = &v
}

func (o CreateCopytradingSetInstrumentsV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCopytradingSetInstrumentsV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instId"] = o.InstId
	if !IsNil(o.InstType) {
		toSerialize["instType"] = o.InstType
	}
	return toSerialize, nil
}

func (o *CreateCopytradingSetInstrumentsV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCopytradingSetInstrumentsV5Req := _CreateCopytradingSetInstrumentsV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCopytradingSetInstrumentsV5Req)

	if err != nil {
		return err
	}

	*o = CreateCopytradingSetInstrumentsV5Req(varCreateCopytradingSetInstrumentsV5Req)

	return err
}

type NullableCreateCopytradingSetInstrumentsV5Req struct {
	value *CreateCopytradingSetInstrumentsV5Req
	isSet bool
}

func (v NullableCreateCopytradingSetInstrumentsV5Req) Get() *CreateCopytradingSetInstrumentsV5Req {
	return v.value
}

func (v *NullableCreateCopytradingSetInstrumentsV5Req) Set(val *CreateCopytradingSetInstrumentsV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCopytradingSetInstrumentsV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCopytradingSetInstrumentsV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCopytradingSetInstrumentsV5Req(val *CreateCopytradingSetInstrumentsV5Req) *NullableCreateCopytradingSetInstrumentsV5Req {
	return &NullableCreateCopytradingSetInstrumentsV5Req{value: val, isSet: true}
}

func (v NullableCreateCopytradingSetInstrumentsV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCopytradingSetInstrumentsV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


