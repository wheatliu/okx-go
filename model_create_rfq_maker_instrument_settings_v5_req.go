/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRfqMakerInstrumentSettingsV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRfqMakerInstrumentSettingsV5Req{}

// CreateRfqMakerInstrumentSettingsV5Req struct for CreateRfqMakerInstrumentSettingsV5Req
type CreateRfqMakerInstrumentSettingsV5Req struct {
	// Elements of the instType.
	Data []CreateRfqMakerInstrumentSettingsV5ReqDataInner `json:"data"`
	// Receive all instruments or not under specific instType setting.   Valid value can be boolean (`True`/`False`). By default, the value will be `false`.
	IncludeAll *bool `json:"includeAll,omitempty"`
	// Type of instrument. Valid value can be `FUTURES`, `OPTION`, `SWAP` or `SPOT`.
	InstType string `json:"instType"`
}

type _CreateRfqMakerInstrumentSettingsV5Req CreateRfqMakerInstrumentSettingsV5Req

// NewCreateRfqMakerInstrumentSettingsV5Req instantiates a new CreateRfqMakerInstrumentSettingsV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRfqMakerInstrumentSettingsV5Req(data []CreateRfqMakerInstrumentSettingsV5ReqDataInner, instType string) *CreateRfqMakerInstrumentSettingsV5Req {
	this := CreateRfqMakerInstrumentSettingsV5Req{}
	this.Data = data
	this.InstType = instType
	return &this
}

// NewCreateRfqMakerInstrumentSettingsV5ReqWithDefaults instantiates a new CreateRfqMakerInstrumentSettingsV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRfqMakerInstrumentSettingsV5ReqWithDefaults() *CreateRfqMakerInstrumentSettingsV5Req {
	this := CreateRfqMakerInstrumentSettingsV5Req{}
	var instType string = ""
	this.InstType = instType
	return &this
}

// GetData returns the Data field value
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetData() []CreateRfqMakerInstrumentSettingsV5ReqDataInner {
	if o == nil {
		var ret []CreateRfqMakerInstrumentSettingsV5ReqDataInner
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetDataOk() ([]CreateRfqMakerInstrumentSettingsV5ReqDataInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CreateRfqMakerInstrumentSettingsV5Req) SetData(v []CreateRfqMakerInstrumentSettingsV5ReqDataInner) {
	o.Data = v
}

// GetIncludeAll returns the IncludeAll field value if set, zero value otherwise.
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetIncludeAll() bool {
	if o == nil || IsNil(o.IncludeAll) {
		var ret bool
		return ret
	}
	return *o.IncludeAll
}

// GetIncludeAllOk returns a tuple with the IncludeAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetIncludeAllOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeAll) {
		return nil, false
	}
	return o.IncludeAll, true
}

// HasIncludeAll returns a boolean if a field has been set.
func (o *CreateRfqMakerInstrumentSettingsV5Req) HasIncludeAll() bool {
	if o != nil && !IsNil(o.IncludeAll) {
		return true
	}

	return false
}

// SetIncludeAll gets a reference to the given bool and assigns it to the IncludeAll field.
func (o *CreateRfqMakerInstrumentSettingsV5Req) SetIncludeAll(v bool) {
	o.IncludeAll = &v
}

// GetInstType returns the InstType field value
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetInstType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstType
}

// GetInstTypeOk returns a tuple with the InstType field value
// and a boolean to check if the value has been set.
func (o *CreateRfqMakerInstrumentSettingsV5Req) GetInstTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstType, true
}

// SetInstType sets field value
func (o *CreateRfqMakerInstrumentSettingsV5Req) SetInstType(v string) {
	o.InstType = v
}

func (o CreateRfqMakerInstrumentSettingsV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRfqMakerInstrumentSettingsV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.IncludeAll) {
		toSerialize["includeAll"] = o.IncludeAll
	}
	toSerialize["instType"] = o.InstType
	return toSerialize, nil
}

func (o *CreateRfqMakerInstrumentSettingsV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"instType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRfqMakerInstrumentSettingsV5Req := _CreateRfqMakerInstrumentSettingsV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRfqMakerInstrumentSettingsV5Req)

	if err != nil {
		return err
	}

	*o = CreateRfqMakerInstrumentSettingsV5Req(varCreateRfqMakerInstrumentSettingsV5Req)

	return err
}

type NullableCreateRfqMakerInstrumentSettingsV5Req struct {
	value *CreateRfqMakerInstrumentSettingsV5Req
	isSet bool
}

func (v NullableCreateRfqMakerInstrumentSettingsV5Req) Get() *CreateRfqMakerInstrumentSettingsV5Req {
	return v.value
}

func (v *NullableCreateRfqMakerInstrumentSettingsV5Req) Set(val *CreateRfqMakerInstrumentSettingsV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRfqMakerInstrumentSettingsV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRfqMakerInstrumentSettingsV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRfqMakerInstrumentSettingsV5Req(val *CreateRfqMakerInstrumentSettingsV5Req) *NullableCreateRfqMakerInstrumentSettingsV5Req {
	return &NullableCreateRfqMakerInstrumentSettingsV5Req{value: val, isSet: true}
}

func (v NullableCreateRfqMakerInstrumentSettingsV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRfqMakerInstrumentSettingsV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


