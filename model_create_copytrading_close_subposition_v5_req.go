/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCopytradingCloseSubpositionV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCopytradingCloseSubpositionV5Req{}

// CreateCopytradingCloseSubpositionV5Req struct for CreateCopytradingCloseSubpositionV5Req
type CreateCopytradingCloseSubpositionV5Req struct {
	// Instrument type  `SPOT`  `SWAP`, the default value
	InstType *string `json:"instType,omitempty"`
	// Order type  `market`：Market order, the default value  `limit`：Limit order  
	OrdType *string `json:"ordType,omitempty"`
	// Order price. Only applicable to `limit` order and `SPOT` lead trader   If the price is 0, the pending order will be canceled.   It is modifying order if you set `px` after placing limit order.
	Px *string `json:"px,omitempty"`
	// Lead position ID
	SubPosId string `json:"subPosId"`
	// Order tag  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
	Tag *string `json:"tag,omitempty"`
}

type _CreateCopytradingCloseSubpositionV5Req CreateCopytradingCloseSubpositionV5Req

// NewCreateCopytradingCloseSubpositionV5Req instantiates a new CreateCopytradingCloseSubpositionV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCopytradingCloseSubpositionV5Req(subPosId string) *CreateCopytradingCloseSubpositionV5Req {
	this := CreateCopytradingCloseSubpositionV5Req{}
	var instType string = ""
	this.InstType = &instType
	var ordType string = ""
	this.OrdType = &ordType
	var px string = ""
	this.Px = &px
	this.SubPosId = subPosId
	var tag string = ""
	this.Tag = &tag
	return &this
}

// NewCreateCopytradingCloseSubpositionV5ReqWithDefaults instantiates a new CreateCopytradingCloseSubpositionV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCopytradingCloseSubpositionV5ReqWithDefaults() *CreateCopytradingCloseSubpositionV5Req {
	this := CreateCopytradingCloseSubpositionV5Req{}
	var instType string = ""
	this.InstType = &instType
	var ordType string = ""
	this.OrdType = &ordType
	var px string = ""
	this.Px = &px
	var subPosId string = ""
	this.SubPosId = subPosId
	var tag string = ""
	this.Tag = &tag
	return &this
}

// GetInstType returns the InstType field value if set, zero value otherwise.
func (o *CreateCopytradingCloseSubpositionV5Req) GetInstType() string {
	if o == nil || IsNil(o.InstType) {
		var ret string
		return ret
	}
	return *o.InstType
}

// GetInstTypeOk returns a tuple with the InstType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) GetInstTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstType) {
		return nil, false
	}
	return o.InstType, true
}

// HasInstType returns a boolean if a field has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) HasInstType() bool {
	if o != nil && !IsNil(o.InstType) {
		return true
	}

	return false
}

// SetInstType gets a reference to the given string and assigns it to the InstType field.
func (o *CreateCopytradingCloseSubpositionV5Req) SetInstType(v string) {
	o.InstType = &v
}

// GetOrdType returns the OrdType field value if set, zero value otherwise.
func (o *CreateCopytradingCloseSubpositionV5Req) GetOrdType() string {
	if o == nil || IsNil(o.OrdType) {
		var ret string
		return ret
	}
	return *o.OrdType
}

// GetOrdTypeOk returns a tuple with the OrdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) GetOrdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrdType) {
		return nil, false
	}
	return o.OrdType, true
}

// HasOrdType returns a boolean if a field has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) HasOrdType() bool {
	if o != nil && !IsNil(o.OrdType) {
		return true
	}

	return false
}

// SetOrdType gets a reference to the given string and assigns it to the OrdType field.
func (o *CreateCopytradingCloseSubpositionV5Req) SetOrdType(v string) {
	o.OrdType = &v
}

// GetPx returns the Px field value if set, zero value otherwise.
func (o *CreateCopytradingCloseSubpositionV5Req) GetPx() string {
	if o == nil || IsNil(o.Px) {
		var ret string
		return ret
	}
	return *o.Px
}

// GetPxOk returns a tuple with the Px field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) GetPxOk() (*string, bool) {
	if o == nil || IsNil(o.Px) {
		return nil, false
	}
	return o.Px, true
}

// HasPx returns a boolean if a field has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) HasPx() bool {
	if o != nil && !IsNil(o.Px) {
		return true
	}

	return false
}

// SetPx gets a reference to the given string and assigns it to the Px field.
func (o *CreateCopytradingCloseSubpositionV5Req) SetPx(v string) {
	o.Px = &v
}

// GetSubPosId returns the SubPosId field value
func (o *CreateCopytradingCloseSubpositionV5Req) GetSubPosId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubPosId
}

// GetSubPosIdOk returns a tuple with the SubPosId field value
// and a boolean to check if the value has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) GetSubPosIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubPosId, true
}

// SetSubPosId sets field value
func (o *CreateCopytradingCloseSubpositionV5Req) SetSubPosId(v string) {
	o.SubPosId = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateCopytradingCloseSubpositionV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateCopytradingCloseSubpositionV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateCopytradingCloseSubpositionV5Req) SetTag(v string) {
	o.Tag = &v
}

func (o CreateCopytradingCloseSubpositionV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCopytradingCloseSubpositionV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstType) {
		toSerialize["instType"] = o.InstType
	}
	if !IsNil(o.OrdType) {
		toSerialize["ordType"] = o.OrdType
	}
	if !IsNil(o.Px) {
		toSerialize["px"] = o.Px
	}
	toSerialize["subPosId"] = o.SubPosId
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *CreateCopytradingCloseSubpositionV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subPosId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCopytradingCloseSubpositionV5Req := _CreateCopytradingCloseSubpositionV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCopytradingCloseSubpositionV5Req)

	if err != nil {
		return err
	}

	*o = CreateCopytradingCloseSubpositionV5Req(varCreateCopytradingCloseSubpositionV5Req)

	return err
}

type NullableCreateCopytradingCloseSubpositionV5Req struct {
	value *CreateCopytradingCloseSubpositionV5Req
	isSet bool
}

func (v NullableCreateCopytradingCloseSubpositionV5Req) Get() *CreateCopytradingCloseSubpositionV5Req {
	return v.value
}

func (v *NullableCreateCopytradingCloseSubpositionV5Req) Set(val *CreateCopytradingCloseSubpositionV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCopytradingCloseSubpositionV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCopytradingCloseSubpositionV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCopytradingCloseSubpositionV5Req(val *CreateCopytradingCloseSubpositionV5Req) *NullableCreateCopytradingCloseSubpositionV5Req {
	return &NullableCreateCopytradingCloseSubpositionV5Req{value: val, isSet: true}
}

func (v NullableCreateCopytradingCloseSubpositionV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCopytradingCloseSubpositionV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


