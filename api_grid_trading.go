/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"fmt"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GridTradingAPIService GridTradingAPI service
type GridTradingAPIService service

type ApiCreateTradingBotGridAdjustInvestmentV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridAdjustInvestmentV5Req *CreateTradingBotGridAdjustInvestmentV5Req
}

// The request body for CreateTradingBotGridAdjustInvestmentV5
func (r ApiCreateTradingBotGridAdjustInvestmentV5Request) CreateTradingBotGridAdjustInvestmentV5Req(createTradingBotGridAdjustInvestmentV5Req CreateTradingBotGridAdjustInvestmentV5Req) ApiCreateTradingBotGridAdjustInvestmentV5Request {
	r.createTradingBotGridAdjustInvestmentV5Req = &createTradingBotGridAdjustInvestmentV5Req
	return r
}

func (r ApiCreateTradingBotGridAdjustInvestmentV5Request) Execute() (*CreateTradingBotGridAdjustInvestmentV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridAdjustInvestmentV5Execute(r)
}

/*
CreateTradingBotGridAdjustInvestmentV5 POST / Add investment

It is used to add investment and only applicable to contract gird.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridAdjustInvestmentV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridAdjustInvestmentV5(ctx context.Context) ApiCreateTradingBotGridAdjustInvestmentV5Request {
	return ApiCreateTradingBotGridAdjustInvestmentV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridAdjustInvestmentV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridAdjustInvestmentV5Execute(r ApiCreateTradingBotGridAdjustInvestmentV5Request) (*CreateTradingBotGridAdjustInvestmentV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridAdjustInvestmentV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridAdjustInvestmentV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/adjust-investment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridAdjustInvestmentV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridAdjustInvestmentV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridAdjustInvestmentV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridAmendOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridAmendOrderAlgoV5Req *CreateTradingBotGridAmendOrderAlgoV5Req
}

// The request body for CreateTradingBotGridAmendOrderAlgoV5
func (r ApiCreateTradingBotGridAmendOrderAlgoV5Request) CreateTradingBotGridAmendOrderAlgoV5Req(createTradingBotGridAmendOrderAlgoV5Req CreateTradingBotGridAmendOrderAlgoV5Req) ApiCreateTradingBotGridAmendOrderAlgoV5Request {
	r.createTradingBotGridAmendOrderAlgoV5Req = &createTradingBotGridAmendOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotGridAmendOrderAlgoV5Request) Execute() (*CreateTradingBotGridAmendOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridAmendOrderAlgoV5Execute(r)
}

/*
CreateTradingBotGridAmendOrderAlgoV5 POST / Amend grid algo order

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridAmendOrderAlgoV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridAmendOrderAlgoV5(ctx context.Context) ApiCreateTradingBotGridAmendOrderAlgoV5Request {
	return ApiCreateTradingBotGridAmendOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridAmendOrderAlgoV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridAmendOrderAlgoV5Execute(r ApiCreateTradingBotGridAmendOrderAlgoV5Request) (*CreateTradingBotGridAmendOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridAmendOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridAmendOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/amend-order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridAmendOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridAmendOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridAmendOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridCancelCloseOrderV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridCancelCloseOrderV5Req *CreateTradingBotGridCancelCloseOrderV5Req
}

// The request body for CreateTradingBotGridCancelCloseOrderV5
func (r ApiCreateTradingBotGridCancelCloseOrderV5Request) CreateTradingBotGridCancelCloseOrderV5Req(createTradingBotGridCancelCloseOrderV5Req CreateTradingBotGridCancelCloseOrderV5Req) ApiCreateTradingBotGridCancelCloseOrderV5Request {
	r.createTradingBotGridCancelCloseOrderV5Req = &createTradingBotGridCancelCloseOrderV5Req
	return r
}

func (r ApiCreateTradingBotGridCancelCloseOrderV5Request) Execute() (*CreateTradingBotGridCancelCloseOrderV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridCancelCloseOrderV5Execute(r)
}

/*
CreateTradingBotGridCancelCloseOrderV5 POST / Cancel close position order for contract grid

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridCancelCloseOrderV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridCancelCloseOrderV5(ctx context.Context) ApiCreateTradingBotGridCancelCloseOrderV5Request {
	return ApiCreateTradingBotGridCancelCloseOrderV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridCancelCloseOrderV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridCancelCloseOrderV5Execute(r ApiCreateTradingBotGridCancelCloseOrderV5Request) (*CreateTradingBotGridCancelCloseOrderV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridCancelCloseOrderV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridCancelCloseOrderV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/cancel-close-order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridCancelCloseOrderV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridCancelCloseOrderV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridCancelCloseOrderV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridClosePositionV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridClosePositionV5Req *CreateTradingBotGridClosePositionV5Req
}

// The request body for CreateTradingBotGridClosePositionV5
func (r ApiCreateTradingBotGridClosePositionV5Request) CreateTradingBotGridClosePositionV5Req(createTradingBotGridClosePositionV5Req CreateTradingBotGridClosePositionV5Req) ApiCreateTradingBotGridClosePositionV5Request {
	r.createTradingBotGridClosePositionV5Req = &createTradingBotGridClosePositionV5Req
	return r
}

func (r ApiCreateTradingBotGridClosePositionV5Request) Execute() (*CreateTradingBotGridClosePositionV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridClosePositionV5Execute(r)
}

/*
CreateTradingBotGridClosePositionV5 POST / Close position for contract grid

Close position when the contract grid stop type is 'keep position'.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridClosePositionV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridClosePositionV5(ctx context.Context) ApiCreateTradingBotGridClosePositionV5Request {
	return ApiCreateTradingBotGridClosePositionV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridClosePositionV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridClosePositionV5Execute(r ApiCreateTradingBotGridClosePositionV5Request) (*CreateTradingBotGridClosePositionV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridClosePositionV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridClosePositionV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/close-position"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridClosePositionV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridClosePositionV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridClosePositionV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridComputeMarginBalanceV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridComputeMarginBalanceV5Req *CreateTradingBotGridComputeMarginBalanceV5Req
}

// The request body for CreateTradingBotGridComputeMarginBalanceV5
func (r ApiCreateTradingBotGridComputeMarginBalanceV5Request) CreateTradingBotGridComputeMarginBalanceV5Req(createTradingBotGridComputeMarginBalanceV5Req CreateTradingBotGridComputeMarginBalanceV5Req) ApiCreateTradingBotGridComputeMarginBalanceV5Request {
	r.createTradingBotGridComputeMarginBalanceV5Req = &createTradingBotGridComputeMarginBalanceV5Req
	return r
}

func (r ApiCreateTradingBotGridComputeMarginBalanceV5Request) Execute() (*CreateTradingBotGridComputeMarginBalanceV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridComputeMarginBalanceV5Execute(r)
}

/*
CreateTradingBotGridComputeMarginBalanceV5 POST / Compute margin balance

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridComputeMarginBalanceV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridComputeMarginBalanceV5(ctx context.Context) ApiCreateTradingBotGridComputeMarginBalanceV5Request {
	return ApiCreateTradingBotGridComputeMarginBalanceV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridComputeMarginBalanceV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridComputeMarginBalanceV5Execute(r ApiCreateTradingBotGridComputeMarginBalanceV5Request) (*CreateTradingBotGridComputeMarginBalanceV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridComputeMarginBalanceV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridComputeMarginBalanceV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/compute-margin-balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridComputeMarginBalanceV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridComputeMarginBalanceV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridComputeMarginBalanceV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridMarginBalanceV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridMarginBalanceV5Req *CreateTradingBotGridMarginBalanceV5Req
}

// The request body for CreateTradingBotGridMarginBalanceV5
func (r ApiCreateTradingBotGridMarginBalanceV5Request) CreateTradingBotGridMarginBalanceV5Req(createTradingBotGridMarginBalanceV5Req CreateTradingBotGridMarginBalanceV5Req) ApiCreateTradingBotGridMarginBalanceV5Request {
	r.createTradingBotGridMarginBalanceV5Req = &createTradingBotGridMarginBalanceV5Req
	return r
}

func (r ApiCreateTradingBotGridMarginBalanceV5Request) Execute() (*CreateTradingBotGridMarginBalanceV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridMarginBalanceV5Execute(r)
}

/*
CreateTradingBotGridMarginBalanceV5 POST / Adjust margin balance

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridMarginBalanceV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridMarginBalanceV5(ctx context.Context) ApiCreateTradingBotGridMarginBalanceV5Request {
	return ApiCreateTradingBotGridMarginBalanceV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridMarginBalanceV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridMarginBalanceV5Execute(r ApiCreateTradingBotGridMarginBalanceV5Request) (*CreateTradingBotGridMarginBalanceV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridMarginBalanceV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridMarginBalanceV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/margin-balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridMarginBalanceV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridMarginBalanceV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridMarginBalanceV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridMinInvestmentV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridMinInvestmentV5Req *CreateTradingBotGridMinInvestmentV5Req
}

// The request body for CreateTradingBotGridMinInvestmentV5
func (r ApiCreateTradingBotGridMinInvestmentV5Request) CreateTradingBotGridMinInvestmentV5Req(createTradingBotGridMinInvestmentV5Req CreateTradingBotGridMinInvestmentV5Req) ApiCreateTradingBotGridMinInvestmentV5Request {
	r.createTradingBotGridMinInvestmentV5Req = &createTradingBotGridMinInvestmentV5Req
	return r
}

func (r ApiCreateTradingBotGridMinInvestmentV5Request) Execute() (*CreateTradingBotGridMinInvestmentV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridMinInvestmentV5Execute(r)
}

/*
CreateTradingBotGridMinInvestmentV5 POST / Compute min investment (public)

Authentication is not required for this public endpoint.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: IP 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridMinInvestmentV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridMinInvestmentV5(ctx context.Context) ApiCreateTradingBotGridMinInvestmentV5Request {
	return ApiCreateTradingBotGridMinInvestmentV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridMinInvestmentV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridMinInvestmentV5Execute(r ApiCreateTradingBotGridMinInvestmentV5Request) (*CreateTradingBotGridMinInvestmentV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridMinInvestmentV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridMinInvestmentV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/min-investment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridMinInvestmentV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridMinInvestmentV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridMinInvestmentV5Req
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridOrderAlgoV5Req *CreateTradingBotGridOrderAlgoV5Req
}

// The request body for CreateTradingBotGridOrderAlgoV5
func (r ApiCreateTradingBotGridOrderAlgoV5Request) CreateTradingBotGridOrderAlgoV5Req(createTradingBotGridOrderAlgoV5Req CreateTradingBotGridOrderAlgoV5Req) ApiCreateTradingBotGridOrderAlgoV5Request {
	r.createTradingBotGridOrderAlgoV5Req = &createTradingBotGridOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotGridOrderAlgoV5Request) Execute() (*CreateTradingBotGridOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridOrderAlgoV5Execute(r)
}

/*
CreateTradingBotGridOrderAlgoV5 POST / Place grid algo order

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID + Instrument ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridOrderAlgoV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridOrderAlgoV5(ctx context.Context) ApiCreateTradingBotGridOrderAlgoV5Request {
	return ApiCreateTradingBotGridOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridOrderAlgoV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridOrderAlgoV5Execute(r ApiCreateTradingBotGridOrderAlgoV5Request) (*CreateTradingBotGridOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridOrderInstantTriggerV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridOrderInstantTriggerV5Req *CreateTradingBotGridOrderInstantTriggerV5Req
}

// The request body for CreateTradingBotGridOrderInstantTriggerV5
func (r ApiCreateTradingBotGridOrderInstantTriggerV5Request) CreateTradingBotGridOrderInstantTriggerV5Req(createTradingBotGridOrderInstantTriggerV5Req CreateTradingBotGridOrderInstantTriggerV5Req) ApiCreateTradingBotGridOrderInstantTriggerV5Request {
	r.createTradingBotGridOrderInstantTriggerV5Req = &createTradingBotGridOrderInstantTriggerV5Req
	return r
}

func (r ApiCreateTradingBotGridOrderInstantTriggerV5Request) Execute() (*CreateTradingBotGridOrderInstantTriggerV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridOrderInstantTriggerV5Execute(r)
}

/*
CreateTradingBotGridOrderInstantTriggerV5 POST / Instant trigger grid algo order

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID + Instrument ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridOrderInstantTriggerV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridOrderInstantTriggerV5(ctx context.Context) ApiCreateTradingBotGridOrderInstantTriggerV5Request {
	return ApiCreateTradingBotGridOrderInstantTriggerV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridOrderInstantTriggerV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridOrderInstantTriggerV5Execute(r ApiCreateTradingBotGridOrderInstantTriggerV5Request) (*CreateTradingBotGridOrderInstantTriggerV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridOrderInstantTriggerV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridOrderInstantTriggerV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/order-instant-trigger"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridOrderInstantTriggerV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridOrderInstantTriggerV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridOrderInstantTriggerV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridStopOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridStopOrderAlgoV5Req *CreateTradingBotGridStopOrderAlgoV5Req
}

// The request body for CreateTradingBotGridStopOrderAlgoV5
func (r ApiCreateTradingBotGridStopOrderAlgoV5Request) CreateTradingBotGridStopOrderAlgoV5Req(createTradingBotGridStopOrderAlgoV5Req CreateTradingBotGridStopOrderAlgoV5Req) ApiCreateTradingBotGridStopOrderAlgoV5Request {
	r.createTradingBotGridStopOrderAlgoV5Req = &createTradingBotGridStopOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotGridStopOrderAlgoV5Request) Execute() (*CreateTradingBotGridStopOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridStopOrderAlgoV5Execute(r)
}

/*
CreateTradingBotGridStopOrderAlgoV5 POST / Stop grid algo order

A maximum of 10 orders can be stopped per request.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridStopOrderAlgoV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridStopOrderAlgoV5(ctx context.Context) ApiCreateTradingBotGridStopOrderAlgoV5Request {
	return ApiCreateTradingBotGridStopOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridStopOrderAlgoV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridStopOrderAlgoV5Execute(r ApiCreateTradingBotGridStopOrderAlgoV5Request) (*CreateTradingBotGridStopOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridStopOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridStopOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/stop-order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridStopOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridStopOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridStopOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotGridWithdrawIncomeV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	createTradingBotGridWithdrawIncomeV5Req *CreateTradingBotGridWithdrawIncomeV5Req
}

// The request body for CreateTradingBotGridWithdrawIncomeV5
func (r ApiCreateTradingBotGridWithdrawIncomeV5Request) CreateTradingBotGridWithdrawIncomeV5Req(createTradingBotGridWithdrawIncomeV5Req CreateTradingBotGridWithdrawIncomeV5Req) ApiCreateTradingBotGridWithdrawIncomeV5Request {
	r.createTradingBotGridWithdrawIncomeV5Req = &createTradingBotGridWithdrawIncomeV5Req
	return r
}

func (r ApiCreateTradingBotGridWithdrawIncomeV5Request) Execute() (*CreateTradingBotGridWithdrawIncomeV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotGridWithdrawIncomeV5Execute(r)
}

/*
CreateTradingBotGridWithdrawIncomeV5 POST / Spot grid withdraw income

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotGridWithdrawIncomeV5Request
*/
func (a *GridTradingAPIService) CreateTradingBotGridWithdrawIncomeV5(ctx context.Context) ApiCreateTradingBotGridWithdrawIncomeV5Request {
	return ApiCreateTradingBotGridWithdrawIncomeV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotGridWithdrawIncomeV5Resp
func (a *GridTradingAPIService) CreateTradingBotGridWithdrawIncomeV5Execute(r ApiCreateTradingBotGridWithdrawIncomeV5Request) (*CreateTradingBotGridWithdrawIncomeV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotGridWithdrawIncomeV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.CreateTradingBotGridWithdrawIncomeV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/withdraw-income"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotGridWithdrawIncomeV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotGridWithdrawIncomeV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotGridWithdrawIncomeV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridAiParamV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	instId *string
	direction *string
	duration *string
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridAiParamV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridAiParamV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Instrument ID, e.g. &#x60;BTC-USDT&#x60;
func (r ApiGetTradingBotGridAiParamV5Request) InstId(instId string) ApiGetTradingBotGridAiParamV5Request {
	r.instId = &instId
	return r
}

// Contract grid type  &#x60;long&#x60;,&#x60;short&#x60;,&#x60;neutral&#x60;  Required in the case of &#x60;contract_grid&#x60;
func (r ApiGetTradingBotGridAiParamV5Request) Direction(direction string) ApiGetTradingBotGridAiParamV5Request {
	r.direction = &direction
	return r
}

// Back testing duration  &#x60;7D&#x60;: 7 Days, &#x60;30D&#x60;: 30 Days, &#x60;180D&#x60;: 180 Days  The default is &#x60;7D&#x60; for &#x60;Spot grid&#x60;  Only &#x60;7D&#x60; is available for &#x60;Contract grid&#x60;
func (r ApiGetTradingBotGridAiParamV5Request) Duration(duration string) ApiGetTradingBotGridAiParamV5Request {
	r.duration = &duration
	return r
}

func (r ApiGetTradingBotGridAiParamV5Request) Execute() (*GetTradingBotGridAiParamV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridAiParamV5Execute(r)
}

/*
GetTradingBotGridAiParamV5 GET / Grid AI parameter (public)

Authentication is not required for this public endpoint.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: IP 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridAiParamV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridAiParamV5(ctx context.Context) ApiGetTradingBotGridAiParamV5Request {
	return ApiGetTradingBotGridAiParamV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridAiParamV5Resp
func (a *GridTradingAPIService) GetTradingBotGridAiParamV5Execute(r ApiGetTradingBotGridAiParamV5Request) (*GetTradingBotGridAiParamV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridAiParamV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridAiParamV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/ai-param"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}
	if r.instId == nil {
		return localVarReturnValue, nil, reportError("instId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "instId", r.instId, "form", "")
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
	} else {
		var defaultValue string = ""
		r.direction = &defaultValue
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "form", "")
	} else {
		var defaultValue string = ""
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridGridQuantityV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	instId *string
	runType *string
	algoOrdType *string
	maxPx *string
	minPx *string
	lever *string
}

// Instrument ID, e.g. &#x60;BTC-USDT&#x60;
func (r ApiGetTradingBotGridGridQuantityV5Request) InstId(instId string) ApiGetTradingBotGridGridQuantityV5Request {
	r.instId = &instId
	return r
}

// Grid type  &#x60;1&#x60;: Arithmetic   &#x60;2&#x60;: Geometric
func (r ApiGetTradingBotGridGridQuantityV5Request) RunType(runType string) ApiGetTradingBotGridGridQuantityV5Request {
	r.runType = &runType
	return r
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridGridQuantityV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridGridQuantityV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Upper price of price range
func (r ApiGetTradingBotGridGridQuantityV5Request) MaxPx(maxPx string) ApiGetTradingBotGridGridQuantityV5Request {
	r.maxPx = &maxPx
	return r
}

// Lower price of price range
func (r ApiGetTradingBotGridGridQuantityV5Request) MinPx(minPx string) ApiGetTradingBotGridGridQuantityV5Request {
	r.minPx = &minPx
	return r
}

// Leverage, it is required for contract grid
func (r ApiGetTradingBotGridGridQuantityV5Request) Lever(lever string) ApiGetTradingBotGridGridQuantityV5Request {
	r.lever = &lever
	return r
}

func (r ApiGetTradingBotGridGridQuantityV5Request) Execute() (*GetTradingBotGridGridQuantityV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridGridQuantityV5Execute(r)
}

/*
GetTradingBotGridGridQuantityV5 GET / Max grid quantity (public)

Authentication is not required for this public endpoint.



Maximum grid quantity can be retrieved from this endpoint. Minimum grid quantity always is 2.

#### Rate Limit: 5 requests per 2 seconds 

#### Rate limit rule: IP 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridGridQuantityV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridGridQuantityV5(ctx context.Context) ApiGetTradingBotGridGridQuantityV5Request {
	return ApiGetTradingBotGridGridQuantityV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridGridQuantityV5Resp
func (a *GridTradingAPIService) GetTradingBotGridGridQuantityV5Execute(r ApiGetTradingBotGridGridQuantityV5Request) (*GetTradingBotGridGridQuantityV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridGridQuantityV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridGridQuantityV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/grid-quantity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instId == nil {
		return localVarReturnValue, nil, reportError("instId is required and must be specified")
	}
	if r.runType == nil {
		return localVarReturnValue, nil, reportError("runType is required and must be specified")
	}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}
	if r.maxPx == nil {
		return localVarReturnValue, nil, reportError("maxPx is required and must be specified")
	}
	if r.minPx == nil {
		return localVarReturnValue, nil, reportError("minPx is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "instId", r.instId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "runType", r.runType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "maxPx", r.maxPx, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "minPx", r.minPx, "form", "")
	if r.lever != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lever", r.lever, "form", "")
	} else {
		var defaultValue string = ""
		r.lever = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridOrdersAlgoDetailsV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	algoId *string
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridOrdersAlgoDetailsV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridOrdersAlgoDetailsV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Algo ID
func (r ApiGetTradingBotGridOrdersAlgoDetailsV5Request) AlgoId(algoId string) ApiGetTradingBotGridOrdersAlgoDetailsV5Request {
	r.algoId = &algoId
	return r
}

func (r ApiGetTradingBotGridOrdersAlgoDetailsV5Request) Execute() (*GetTradingBotGridOrdersAlgoDetailsV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridOrdersAlgoDetailsV5Execute(r)
}

/*
GetTradingBotGridOrdersAlgoDetailsV5 GET / Grid algo order details

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridOrdersAlgoDetailsV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoDetailsV5(ctx context.Context) ApiGetTradingBotGridOrdersAlgoDetailsV5Request {
	return ApiGetTradingBotGridOrdersAlgoDetailsV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridOrdersAlgoDetailsV5Resp
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoDetailsV5Execute(r ApiGetTradingBotGridOrdersAlgoDetailsV5Request) (*GetTradingBotGridOrdersAlgoDetailsV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridOrdersAlgoDetailsV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridOrdersAlgoDetailsV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/orders-algo-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridOrdersAlgoHistoryV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	algoId *string
	instId *string
	instType *string
	after *string
	before *string
	limit *string
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Algo ID
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) AlgoId(algoId string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.algoId = &algoId
	return r
}

// Instrument ID, e.g. &#x60;BTC-USDT&#x60;
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) InstId(instId string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.instId = &instId
	return r
}

// Instrument type  &#x60;SPOT&#x60;  &#x60;MARGIN&#x60;  &#x60;FUTURES&#x60;  &#x60;SWAP&#x60;
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) InstType(instType string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.instType = &instType
	return r
}

// Pagination of data to return records earlier than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) After(after string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) Before(before string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100.
func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) Limit(limit string) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) Execute() (*GetTradingBotGridOrdersAlgoHistoryV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridOrdersAlgoHistoryV5Execute(r)
}

/*
GetTradingBotGridOrdersAlgoHistoryV5 GET / Grid algo order history

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridOrdersAlgoHistoryV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoHistoryV5(ctx context.Context) ApiGetTradingBotGridOrdersAlgoHistoryV5Request {
	return ApiGetTradingBotGridOrdersAlgoHistoryV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridOrdersAlgoHistoryV5Resp
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoHistoryV5Execute(r ApiGetTradingBotGridOrdersAlgoHistoryV5Request) (*GetTradingBotGridOrdersAlgoHistoryV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridOrdersAlgoHistoryV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridOrdersAlgoHistoryV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/orders-algo-history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	if r.algoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	} else {
		var defaultValue string = ""
		r.algoId = &defaultValue
	}
	if r.instId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instId", r.instId, "form", "")
	} else {
		var defaultValue string = ""
		r.instId = &defaultValue
	}
	if r.instType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instType", r.instType, "form", "")
	} else {
		var defaultValue string = ""
		r.instType = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridOrdersAlgoPendingV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	algoId *string
	instId *string
	instType *string
	after *string
	before *string
	limit *string
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Algo ID
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) AlgoId(algoId string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.algoId = &algoId
	return r
}

// Instrument ID, e.g. &#x60;BTC-USDT&#x60;
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) InstId(instId string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.instId = &instId
	return r
}

// Instrument type  &#x60;SPOT&#x60;  &#x60;MARGIN&#x60;  &#x60;FUTURES&#x60;  &#x60;SWAP&#x60;
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) InstType(instType string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.instType = &instType
	return r
}

// Pagination of data to return records earlier than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) After(after string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) Before(before string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100
func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) Limit(limit string) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotGridOrdersAlgoPendingV5Request) Execute() (*GetTradingBotGridOrdersAlgoPendingV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridOrdersAlgoPendingV5Execute(r)
}

/*
GetTradingBotGridOrdersAlgoPendingV5 GET / Grid algo order list

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridOrdersAlgoPendingV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoPendingV5(ctx context.Context) ApiGetTradingBotGridOrdersAlgoPendingV5Request {
	return ApiGetTradingBotGridOrdersAlgoPendingV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridOrdersAlgoPendingV5Resp
func (a *GridTradingAPIService) GetTradingBotGridOrdersAlgoPendingV5Execute(r ApiGetTradingBotGridOrdersAlgoPendingV5Request) (*GetTradingBotGridOrdersAlgoPendingV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridOrdersAlgoPendingV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridOrdersAlgoPendingV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/orders-algo-pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	if r.algoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	} else {
		var defaultValue string = ""
		r.algoId = &defaultValue
	}
	if r.instId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instId", r.instId, "form", "")
	} else {
		var defaultValue string = ""
		r.instId = &defaultValue
	}
	if r.instType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instType", r.instType, "form", "")
	} else {
		var defaultValue string = ""
		r.instType = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridPositionsV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	algoId *string
}

// Algo order type  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridPositionsV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridPositionsV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Algo ID
func (r ApiGetTradingBotGridPositionsV5Request) AlgoId(algoId string) ApiGetTradingBotGridPositionsV5Request {
	r.algoId = &algoId
	return r
}

func (r ApiGetTradingBotGridPositionsV5Request) Execute() (*GetTradingBotGridPositionsV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridPositionsV5Execute(r)
}

/*
GetTradingBotGridPositionsV5 GET / Grid algo order positions

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridPositionsV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridPositionsV5(ctx context.Context) ApiGetTradingBotGridPositionsV5Request {
	return ApiGetTradingBotGridPositionsV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridPositionsV5Resp
func (a *GridTradingAPIService) GetTradingBotGridPositionsV5Execute(r ApiGetTradingBotGridPositionsV5Request) (*GetTradingBotGridPositionsV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridPositionsV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridPositionsV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/positions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotGridSubOrdersV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	algoOrdType *string
	algoId *string
	type_ *string
	groupId *string
	after *string
	before *string
	limit *string
}

// Algo order type  &#x60;grid&#x60;: Spot grid  &#x60;contract_grid&#x60;: Contract grid
func (r ApiGetTradingBotGridSubOrdersV5Request) AlgoOrdType(algoOrdType string) ApiGetTradingBotGridSubOrdersV5Request {
	r.algoOrdType = &algoOrdType
	return r
}

// Algo ID
func (r ApiGetTradingBotGridSubOrdersV5Request) AlgoId(algoId string) ApiGetTradingBotGridSubOrdersV5Request {
	r.algoId = &algoId
	return r
}

// Sub order state  &#x60;live&#x60;  &#x60;filled&#x60;
func (r ApiGetTradingBotGridSubOrdersV5Request) Type_(type_ string) ApiGetTradingBotGridSubOrdersV5Request {
	r.type_ = &type_
	return r
}

// Group ID
func (r ApiGetTradingBotGridSubOrdersV5Request) GroupId(groupId string) ApiGetTradingBotGridSubOrdersV5Request {
	r.groupId = &groupId
	return r
}

// Pagination of data to return records earlier than the requested &#x60;ordId&#x60;.
func (r ApiGetTradingBotGridSubOrdersV5Request) After(after string) ApiGetTradingBotGridSubOrdersV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;ordId&#x60;.
func (r ApiGetTradingBotGridSubOrdersV5Request) Before(before string) ApiGetTradingBotGridSubOrdersV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100
func (r ApiGetTradingBotGridSubOrdersV5Request) Limit(limit string) ApiGetTradingBotGridSubOrdersV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotGridSubOrdersV5Request) Execute() (*GetTradingBotGridSubOrdersV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotGridSubOrdersV5Execute(r)
}

/*
GetTradingBotGridSubOrdersV5 GET / Grid algo sub orders

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotGridSubOrdersV5Request
*/
func (a *GridTradingAPIService) GetTradingBotGridSubOrdersV5(ctx context.Context) ApiGetTradingBotGridSubOrdersV5Request {
	return ApiGetTradingBotGridSubOrdersV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotGridSubOrdersV5Resp
func (a *GridTradingAPIService) GetTradingBotGridSubOrdersV5Execute(r ApiGetTradingBotGridSubOrdersV5Request) (*GetTradingBotGridSubOrdersV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotGridSubOrdersV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotGridSubOrdersV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/grid/sub-orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoOrdType == nil {
		return localVarReturnValue, nil, reportError("algoOrdType is required and must be specified")
	}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoOrdType", r.algoOrdType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "form", "")
	} else {
		var defaultValue string = ""
		r.groupId = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotPublicRsiBackTestingV5Request struct {
	ctx context.Context
	ApiService *GridTradingAPIService
	instId *string
	timeframe *string
	thold *string
	timePeriod *string
	triggerCond *string
	duration *string
}

// Instrument ID, e.g. &#x60;BTC-USDT&#x60;  Only applicable to &#x60;SPOT&#x60;
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) InstId(instId string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.instId = &instId
	return r
}

// K-line type  &#x60;3m&#x60;, &#x60;5m&#x60;, &#x60;15m&#x60;, &#x60;30m&#x60; (&#x60;m&#x60;: minute)  &#x60;1H&#x60;, &#x60;4H&#x60; (&#x60;H&#x60;: hour)  &#x60;1D&#x60; (&#x60;D&#x60;: day)
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) Timeframe(timeframe string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.timeframe = &timeframe
	return r
}

// Threshold  The value should be an integer between 1 to 100
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) Thold(thold string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.thold = &thold
	return r
}

// Time Period  &#x60;14&#x60;
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) TimePeriod(timePeriod string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.timePeriod = &timePeriod
	return r
}

// Trigger condition  &#x60;cross_up&#x60;  &#x60;cross_down&#x60;  &#x60;above&#x60;  &#x60;below&#x60;  &#x60;cross&#x60;  Default is &#x60;cross_down&#x60;
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) TriggerCond(triggerCond string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.triggerCond = &triggerCond
	return r
}

// Back testing duration  &#x60;1M&#x60; (&#x60;M&#x60;: month)  Default is &#x60;1M&#x60;
func (r ApiGetTradingBotPublicRsiBackTestingV5Request) Duration(duration string) ApiGetTradingBotPublicRsiBackTestingV5Request {
	r.duration = &duration
	return r
}

func (r ApiGetTradingBotPublicRsiBackTestingV5Request) Execute() (*GetTradingBotPublicRsiBackTestingV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotPublicRsiBackTestingV5Execute(r)
}

/*
GetTradingBotPublicRsiBackTestingV5 GET / RSI back testing (public)

Authentication is not required for this public endpoint.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: IP 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotPublicRsiBackTestingV5Request
*/
func (a *GridTradingAPIService) GetTradingBotPublicRsiBackTestingV5(ctx context.Context) ApiGetTradingBotPublicRsiBackTestingV5Request {
	return ApiGetTradingBotPublicRsiBackTestingV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotPublicRsiBackTestingV5Resp
func (a *GridTradingAPIService) GetTradingBotPublicRsiBackTestingV5Execute(r ApiGetTradingBotPublicRsiBackTestingV5Request) (*GetTradingBotPublicRsiBackTestingV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotPublicRsiBackTestingV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GridTradingAPIService.GetTradingBotPublicRsiBackTestingV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/public/rsi-back-testing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instId == nil {
		return localVarReturnValue, nil, reportError("instId is required and must be specified")
	}
	if r.timeframe == nil {
		return localVarReturnValue, nil, reportError("timeframe is required and must be specified")
	}
	if r.thold == nil {
		return localVarReturnValue, nil, reportError("thold is required and must be specified")
	}
	if r.timePeriod == nil {
		return localVarReturnValue, nil, reportError("timePeriod is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "instId", r.instId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timeframe", r.timeframe, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "thold", r.thold, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timePeriod", r.timePeriod, "form", "")
	if r.triggerCond != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "triggerCond", r.triggerCond, "form", "")
	} else {
		var defaultValue string = ""
		r.triggerCond = &defaultValue
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "form", "")
	} else {
		var defaultValue string = ""
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
