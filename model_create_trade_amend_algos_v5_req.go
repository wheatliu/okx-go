/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeAmendAlgosV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeAmendAlgosV5Req{}

// CreateTradeAmendAlgosV5Req struct for CreateTradeAmendAlgosV5Req
type CreateTradeAmendAlgosV5Req struct {
	// Client-supplied Algo ID  Either `algoId` or `algoClOrdId` is required. If both are passed, `algoId` will be used.
	AlgoClOrdId *string `json:"algoClOrdId,omitempty"`
	// Algo ID  Either `algoId` or `algoClOrdId` is required. If both are passed, `algoId` will be used.
	AlgoId *string `json:"algoId,omitempty"`
	// Whether the order needs to be automatically canceled when the order amendment fails    Valid options: `false` or `true`, the default is `false`.
	CxlOnFail *bool `json:"cxlOnFail,omitempty"`
	// Instrument ID
	InstId string `json:"instId"`
	// New quantity after amendment and it has to be larger than 0.
	NewSz *string `json:"newSz,omitempty"`
	// Client Request ID as assigned by the client for order amendment   A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.   The response will include the corresponding `reqId` to help you identify the request if you provide it in the request.
	ReqId *string `json:"reqId,omitempty"`
}

type _CreateTradeAmendAlgosV5Req CreateTradeAmendAlgosV5Req

// NewCreateTradeAmendAlgosV5Req instantiates a new CreateTradeAmendAlgosV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeAmendAlgosV5Req(instId string) *CreateTradeAmendAlgosV5Req {
	this := CreateTradeAmendAlgosV5Req{}
	var algoClOrdId string = ""
	this.AlgoClOrdId = &algoClOrdId
	var algoId string = ""
	this.AlgoId = &algoId
	this.InstId = instId
	var newSz string = ""
	this.NewSz = &newSz
	var reqId string = ""
	this.ReqId = &reqId
	return &this
}

// NewCreateTradeAmendAlgosV5ReqWithDefaults instantiates a new CreateTradeAmendAlgosV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeAmendAlgosV5ReqWithDefaults() *CreateTradeAmendAlgosV5Req {
	this := CreateTradeAmendAlgosV5Req{}
	var algoClOrdId string = ""
	this.AlgoClOrdId = &algoClOrdId
	var algoId string = ""
	this.AlgoId = &algoId
	var instId string = ""
	this.InstId = instId
	var newSz string = ""
	this.NewSz = &newSz
	var reqId string = ""
	this.ReqId = &reqId
	return &this
}

// GetAlgoClOrdId returns the AlgoClOrdId field value if set, zero value otherwise.
func (o *CreateTradeAmendAlgosV5Req) GetAlgoClOrdId() string {
	if o == nil || IsNil(o.AlgoClOrdId) {
		var ret string
		return ret
	}
	return *o.AlgoClOrdId
}

// GetAlgoClOrdIdOk returns a tuple with the AlgoClOrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetAlgoClOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlgoClOrdId) {
		return nil, false
	}
	return o.AlgoClOrdId, true
}

// HasAlgoClOrdId returns a boolean if a field has been set.
func (o *CreateTradeAmendAlgosV5Req) HasAlgoClOrdId() bool {
	if o != nil && !IsNil(o.AlgoClOrdId) {
		return true
	}

	return false
}

// SetAlgoClOrdId gets a reference to the given string and assigns it to the AlgoClOrdId field.
func (o *CreateTradeAmendAlgosV5Req) SetAlgoClOrdId(v string) {
	o.AlgoClOrdId = &v
}

// GetAlgoId returns the AlgoId field value if set, zero value otherwise.
func (o *CreateTradeAmendAlgosV5Req) GetAlgoId() string {
	if o == nil || IsNil(o.AlgoId) {
		var ret string
		return ret
	}
	return *o.AlgoId
}

// GetAlgoIdOk returns a tuple with the AlgoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetAlgoIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlgoId) {
		return nil, false
	}
	return o.AlgoId, true
}

// HasAlgoId returns a boolean if a field has been set.
func (o *CreateTradeAmendAlgosV5Req) HasAlgoId() bool {
	if o != nil && !IsNil(o.AlgoId) {
		return true
	}

	return false
}

// SetAlgoId gets a reference to the given string and assigns it to the AlgoId field.
func (o *CreateTradeAmendAlgosV5Req) SetAlgoId(v string) {
	o.AlgoId = &v
}

// GetCxlOnFail returns the CxlOnFail field value if set, zero value otherwise.
func (o *CreateTradeAmendAlgosV5Req) GetCxlOnFail() bool {
	if o == nil || IsNil(o.CxlOnFail) {
		var ret bool
		return ret
	}
	return *o.CxlOnFail
}

// GetCxlOnFailOk returns a tuple with the CxlOnFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetCxlOnFailOk() (*bool, bool) {
	if o == nil || IsNil(o.CxlOnFail) {
		return nil, false
	}
	return o.CxlOnFail, true
}

// HasCxlOnFail returns a boolean if a field has been set.
func (o *CreateTradeAmendAlgosV5Req) HasCxlOnFail() bool {
	if o != nil && !IsNil(o.CxlOnFail) {
		return true
	}

	return false
}

// SetCxlOnFail gets a reference to the given bool and assigns it to the CxlOnFail field.
func (o *CreateTradeAmendAlgosV5Req) SetCxlOnFail(v bool) {
	o.CxlOnFail = &v
}

// GetInstId returns the InstId field value
func (o *CreateTradeAmendAlgosV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradeAmendAlgosV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetNewSz returns the NewSz field value if set, zero value otherwise.
func (o *CreateTradeAmendAlgosV5Req) GetNewSz() string {
	if o == nil || IsNil(o.NewSz) {
		var ret string
		return ret
	}
	return *o.NewSz
}

// GetNewSzOk returns a tuple with the NewSz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetNewSzOk() (*string, bool) {
	if o == nil || IsNil(o.NewSz) {
		return nil, false
	}
	return o.NewSz, true
}

// HasNewSz returns a boolean if a field has been set.
func (o *CreateTradeAmendAlgosV5Req) HasNewSz() bool {
	if o != nil && !IsNil(o.NewSz) {
		return true
	}

	return false
}

// SetNewSz gets a reference to the given string and assigns it to the NewSz field.
func (o *CreateTradeAmendAlgosV5Req) SetNewSz(v string) {
	o.NewSz = &v
}

// GetReqId returns the ReqId field value if set, zero value otherwise.
func (o *CreateTradeAmendAlgosV5Req) GetReqId() string {
	if o == nil || IsNil(o.ReqId) {
		var ret string
		return ret
	}
	return *o.ReqId
}

// GetReqIdOk returns a tuple with the ReqId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendAlgosV5Req) GetReqIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReqId) {
		return nil, false
	}
	return o.ReqId, true
}

// HasReqId returns a boolean if a field has been set.
func (o *CreateTradeAmendAlgosV5Req) HasReqId() bool {
	if o != nil && !IsNil(o.ReqId) {
		return true
	}

	return false
}

// SetReqId gets a reference to the given string and assigns it to the ReqId field.
func (o *CreateTradeAmendAlgosV5Req) SetReqId(v string) {
	o.ReqId = &v
}

func (o CreateTradeAmendAlgosV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeAmendAlgosV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlgoClOrdId) {
		toSerialize["algoClOrdId"] = o.AlgoClOrdId
	}
	if !IsNil(o.AlgoId) {
		toSerialize["algoId"] = o.AlgoId
	}
	if !IsNil(o.CxlOnFail) {
		toSerialize["cxlOnFail"] = o.CxlOnFail
	}
	toSerialize["instId"] = o.InstId
	if !IsNil(o.NewSz) {
		toSerialize["newSz"] = o.NewSz
	}
	if !IsNil(o.ReqId) {
		toSerialize["reqId"] = o.ReqId
	}
	return toSerialize, nil
}

func (o *CreateTradeAmendAlgosV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeAmendAlgosV5Req := _CreateTradeAmendAlgosV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeAmendAlgosV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeAmendAlgosV5Req(varCreateTradeAmendAlgosV5Req)

	return err
}

type NullableCreateTradeAmendAlgosV5Req struct {
	value *CreateTradeAmendAlgosV5Req
	isSet bool
}

func (v NullableCreateTradeAmendAlgosV5Req) Get() *CreateTradeAmendAlgosV5Req {
	return v.value
}

func (v *NullableCreateTradeAmendAlgosV5Req) Set(val *CreateTradeAmendAlgosV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeAmendAlgosV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeAmendAlgosV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeAmendAlgosV5Req(val *CreateTradeAmendAlgosV5Req) *NullableCreateTradeAmendAlgosV5Req {
	return &NullableCreateTradeAmendAlgosV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeAmendAlgosV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeAmendAlgosV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


