/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeOrderV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeOrderV5Req{}

// CreateTradeOrderV5Req struct for CreateTradeOrderV5Req
type CreateTradeOrderV5Req struct {
	// TP/SL information attached when placing order
	AttachAlgoOrds []CreateTradeOrderV5ReqAttachAlgoOrdsInner `json:"attachAlgoOrds,omitempty"`
	// Whether to disallow the system from amending the size of the SPOT Market Order.  Valid options: `true` or `false`. The default value is `false`.  If `true`, system will not amend and reject the market order if user does not have sufficient funds.   Only applicable to SPOT Market Orders
	BanAmend *bool `json:"banAmend,omitempty"`
	// Margin currency   Applicable to all `isolated` `MARGIN` orders and `cross` `MARGIN` orders in `Spot and futures mode`.
	Ccy *string `json:"ccy,omitempty"`
	// Client Order ID as assigned by the client    A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.  Only applicable to general order. It will not be posted to algoId when placing TP/SL order after the general order is filled completely.
	ClOrdId *string `json:"clOrdId,omitempty"`
	// Instrument ID, e.g. `BTC-USDT`
	InstId string `json:"instId"`
	// Order type   `market`: Market order   `limit`: Limit order   `post_only`: Post-only order   `fok`: Fill-or-kill order   `ioc`: Immediate-or-cancel order    `optimal_limit_ioc`: Market order with immediate-or-cancel order (applicable only to Expiry Futures and Perpetual Futures).  `mmp`: Market Maker Protection (only applicable to Option in Portfolio Margin mode)   `mmp_and_post_only`: Market Maker Protection and Post-only order(only applicable to Option in Portfolio Margin mode)
	OrdType string `json:"ordType"`
	// Position side    The default is `net` in the `net` mode   It is required in the `long/short` mode, and can only be `long` or `short`.   Only applicable to `FUTURES`/`SWAP`.
	PosSide *string `json:"posSide,omitempty"`
	// Order price. Only applicable to `limit`,`post_only`,`fok`,`ioc`,`mmp`,`mmp_and_post_only` order.  When placing an option order, one of px/pxUsd/pxVol must be filled in, and only one can be filled in
	Px *string `json:"px,omitempty"`
	// Place options orders in `USD`   Only applicable to options   When placing an option order, one of px/pxUsd/pxVol must be filled in, and only one can be filled in
	PxUsd *string `json:"pxUsd,omitempty"`
	// Place options orders based on implied volatility, where 1 represents 100%   Only applicable to options   When placing an option order, one of px/pxUsd/pxVol must be filled in, and only one can be filled in
	PxVol *string `json:"pxVol,omitempty"`
	// Quick Margin type. Only applicable to Quick Margin Mode of isolated margin   `manual`, `auto_borrow`, `auto_repay`  The default value is `manual`(Deprecated)
	// Deprecated
	QuickMgnType *string `json:"quickMgnType,omitempty"`
	// Whether orders can only reduce in position size.    Valid options: `true` or `false`. The default value is `false`.  Only applicable to `MARGIN` orders, and `FUTURES`/`SWAP` orders in `net` mode   Only applicable to `Spot and futures mode` and `Multi-currency margin`
	ReduceOnly *bool `json:"reduceOnly,omitempty"`
	// Order side, `buy` `sell`
	Side string `json:"side"`
	// Self trade prevention ID. Orders from the same master account with the same ID will be prevented from self trade.  Numerical integers defined by user in the range of 1<= x<= 999999999 (deprecated)
	// Deprecated
	StpId *string `json:"stpId,omitempty"`
	// Self trade prevention mode.   Default to cancel maker   `cancel_maker`,`cancel_taker`, `cancel_both`  Cancel both does not support FOK.
	StpMode *string `json:"stpMode,omitempty"`
	// Quantity to buy or sell
	Sz string `json:"sz"`
	// Order tag    A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
	Tag *string `json:"tag,omitempty"`
	// Trade mode  Margin mode `cross` `isolated`  Non-Margin mode `cash`  `spot_isolated` (only applicable to SPOT lead trading, `tdMode` should be `spot_isolated` for `SPOT` lead trading.)
	TdMode string `json:"tdMode"`
	// Whether the target currency uses the quote or base currency.  `base_ccy`: Base currency ,`quote_ccy`: Quote currency    Only applicable to `SPOT` Market Orders  Default is `quote_ccy` for buy, `base_ccy` for sell
	TgtCcy *string `json:"tgtCcy,omitempty"`
}

type _CreateTradeOrderV5Req CreateTradeOrderV5Req

// NewCreateTradeOrderV5Req instantiates a new CreateTradeOrderV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeOrderV5Req(instId string, ordType string, side string, sz string, tdMode string) *CreateTradeOrderV5Req {
	this := CreateTradeOrderV5Req{}
	var ccy string = ""
	this.Ccy = &ccy
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	this.InstId = instId
	this.OrdType = ordType
	var posSide string = ""
	this.PosSide = &posSide
	var px string = ""
	this.Px = &px
	var pxUsd string = ""
	this.PxUsd = &pxUsd
	var pxVol string = ""
	this.PxVol = &pxVol
	var quickMgnType string = ""
	this.QuickMgnType = &quickMgnType
	this.Side = side
	var stpId string = ""
	this.StpId = &stpId
	var stpMode string = ""
	this.StpMode = &stpMode
	this.Sz = sz
	var tag string = ""
	this.Tag = &tag
	this.TdMode = tdMode
	var tgtCcy string = ""
	this.TgtCcy = &tgtCcy
	return &this
}

// NewCreateTradeOrderV5ReqWithDefaults instantiates a new CreateTradeOrderV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeOrderV5ReqWithDefaults() *CreateTradeOrderV5Req {
	this := CreateTradeOrderV5Req{}
	var ccy string = ""
	this.Ccy = &ccy
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	var instId string = ""
	this.InstId = instId
	var ordType string = ""
	this.OrdType = ordType
	var posSide string = ""
	this.PosSide = &posSide
	var px string = ""
	this.Px = &px
	var pxUsd string = ""
	this.PxUsd = &pxUsd
	var pxVol string = ""
	this.PxVol = &pxVol
	var quickMgnType string = ""
	this.QuickMgnType = &quickMgnType
	var side string = ""
	this.Side = side
	var stpId string = ""
	this.StpId = &stpId
	var stpMode string = ""
	this.StpMode = &stpMode
	var sz string = ""
	this.Sz = sz
	var tag string = ""
	this.Tag = &tag
	var tdMode string = ""
	this.TdMode = tdMode
	var tgtCcy string = ""
	this.TgtCcy = &tgtCcy
	return &this
}

// GetAttachAlgoOrds returns the AttachAlgoOrds field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetAttachAlgoOrds() []CreateTradeOrderV5ReqAttachAlgoOrdsInner {
	if o == nil || IsNil(o.AttachAlgoOrds) {
		var ret []CreateTradeOrderV5ReqAttachAlgoOrdsInner
		return ret
	}
	return o.AttachAlgoOrds
}

// GetAttachAlgoOrdsOk returns a tuple with the AttachAlgoOrds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetAttachAlgoOrdsOk() ([]CreateTradeOrderV5ReqAttachAlgoOrdsInner, bool) {
	if o == nil || IsNil(o.AttachAlgoOrds) {
		return nil, false
	}
	return o.AttachAlgoOrds, true
}

// HasAttachAlgoOrds returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasAttachAlgoOrds() bool {
	if o != nil && !IsNil(o.AttachAlgoOrds) {
		return true
	}

	return false
}

// SetAttachAlgoOrds gets a reference to the given []CreateTradeOrderV5ReqAttachAlgoOrdsInner and assigns it to the AttachAlgoOrds field.
func (o *CreateTradeOrderV5Req) SetAttachAlgoOrds(v []CreateTradeOrderV5ReqAttachAlgoOrdsInner) {
	o.AttachAlgoOrds = v
}

// GetBanAmend returns the BanAmend field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetBanAmend() bool {
	if o == nil || IsNil(o.BanAmend) {
		var ret bool
		return ret
	}
	return *o.BanAmend
}

// GetBanAmendOk returns a tuple with the BanAmend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetBanAmendOk() (*bool, bool) {
	if o == nil || IsNil(o.BanAmend) {
		return nil, false
	}
	return o.BanAmend, true
}

// HasBanAmend returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasBanAmend() bool {
	if o != nil && !IsNil(o.BanAmend) {
		return true
	}

	return false
}

// SetBanAmend gets a reference to the given bool and assigns it to the BanAmend field.
func (o *CreateTradeOrderV5Req) SetBanAmend(v bool) {
	o.BanAmend = &v
}

// GetCcy returns the Ccy field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetCcy() string {
	if o == nil || IsNil(o.Ccy) {
		var ret string
		return ret
	}
	return *o.Ccy
}

// GetCcyOk returns a tuple with the Ccy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetCcyOk() (*string, bool) {
	if o == nil || IsNil(o.Ccy) {
		return nil, false
	}
	return o.Ccy, true
}

// HasCcy returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasCcy() bool {
	if o != nil && !IsNil(o.Ccy) {
		return true
	}

	return false
}

// SetCcy gets a reference to the given string and assigns it to the Ccy field.
func (o *CreateTradeOrderV5Req) SetCcy(v string) {
	o.Ccy = &v
}

// GetClOrdId returns the ClOrdId field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetClOrdId() string {
	if o == nil || IsNil(o.ClOrdId) {
		var ret string
		return ret
	}
	return *o.ClOrdId
}

// GetClOrdIdOk returns a tuple with the ClOrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetClOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClOrdId) {
		return nil, false
	}
	return o.ClOrdId, true
}

// HasClOrdId returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasClOrdId() bool {
	if o != nil && !IsNil(o.ClOrdId) {
		return true
	}

	return false
}

// SetClOrdId gets a reference to the given string and assigns it to the ClOrdId field.
func (o *CreateTradeOrderV5Req) SetClOrdId(v string) {
	o.ClOrdId = &v
}

// GetInstId returns the InstId field value
func (o *CreateTradeOrderV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradeOrderV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetOrdType returns the OrdType field value
func (o *CreateTradeOrderV5Req) GetOrdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrdType
}

// GetOrdTypeOk returns a tuple with the OrdType field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetOrdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrdType, true
}

// SetOrdType sets field value
func (o *CreateTradeOrderV5Req) SetOrdType(v string) {
	o.OrdType = v
}

// GetPosSide returns the PosSide field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetPosSide() string {
	if o == nil || IsNil(o.PosSide) {
		var ret string
		return ret
	}
	return *o.PosSide
}

// GetPosSideOk returns a tuple with the PosSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetPosSideOk() (*string, bool) {
	if o == nil || IsNil(o.PosSide) {
		return nil, false
	}
	return o.PosSide, true
}

// HasPosSide returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasPosSide() bool {
	if o != nil && !IsNil(o.PosSide) {
		return true
	}

	return false
}

// SetPosSide gets a reference to the given string and assigns it to the PosSide field.
func (o *CreateTradeOrderV5Req) SetPosSide(v string) {
	o.PosSide = &v
}

// GetPx returns the Px field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetPx() string {
	if o == nil || IsNil(o.Px) {
		var ret string
		return ret
	}
	return *o.Px
}

// GetPxOk returns a tuple with the Px field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetPxOk() (*string, bool) {
	if o == nil || IsNil(o.Px) {
		return nil, false
	}
	return o.Px, true
}

// HasPx returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasPx() bool {
	if o != nil && !IsNil(o.Px) {
		return true
	}

	return false
}

// SetPx gets a reference to the given string and assigns it to the Px field.
func (o *CreateTradeOrderV5Req) SetPx(v string) {
	o.Px = &v
}

// GetPxUsd returns the PxUsd field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetPxUsd() string {
	if o == nil || IsNil(o.PxUsd) {
		var ret string
		return ret
	}
	return *o.PxUsd
}

// GetPxUsdOk returns a tuple with the PxUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetPxUsdOk() (*string, bool) {
	if o == nil || IsNil(o.PxUsd) {
		return nil, false
	}
	return o.PxUsd, true
}

// HasPxUsd returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasPxUsd() bool {
	if o != nil && !IsNil(o.PxUsd) {
		return true
	}

	return false
}

// SetPxUsd gets a reference to the given string and assigns it to the PxUsd field.
func (o *CreateTradeOrderV5Req) SetPxUsd(v string) {
	o.PxUsd = &v
}

// GetPxVol returns the PxVol field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetPxVol() string {
	if o == nil || IsNil(o.PxVol) {
		var ret string
		return ret
	}
	return *o.PxVol
}

// GetPxVolOk returns a tuple with the PxVol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetPxVolOk() (*string, bool) {
	if o == nil || IsNil(o.PxVol) {
		return nil, false
	}
	return o.PxVol, true
}

// HasPxVol returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasPxVol() bool {
	if o != nil && !IsNil(o.PxVol) {
		return true
	}

	return false
}

// SetPxVol gets a reference to the given string and assigns it to the PxVol field.
func (o *CreateTradeOrderV5Req) SetPxVol(v string) {
	o.PxVol = &v
}

// GetQuickMgnType returns the QuickMgnType field value if set, zero value otherwise.
// Deprecated
func (o *CreateTradeOrderV5Req) GetQuickMgnType() string {
	if o == nil || IsNil(o.QuickMgnType) {
		var ret string
		return ret
	}
	return *o.QuickMgnType
}

// GetQuickMgnTypeOk returns a tuple with the QuickMgnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateTradeOrderV5Req) GetQuickMgnTypeOk() (*string, bool) {
	if o == nil || IsNil(o.QuickMgnType) {
		return nil, false
	}
	return o.QuickMgnType, true
}

// HasQuickMgnType returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasQuickMgnType() bool {
	if o != nil && !IsNil(o.QuickMgnType) {
		return true
	}

	return false
}

// SetQuickMgnType gets a reference to the given string and assigns it to the QuickMgnType field.
// Deprecated
func (o *CreateTradeOrderV5Req) SetQuickMgnType(v string) {
	o.QuickMgnType = &v
}

// GetReduceOnly returns the ReduceOnly field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetReduceOnly() bool {
	if o == nil || IsNil(o.ReduceOnly) {
		var ret bool
		return ret
	}
	return *o.ReduceOnly
}

// GetReduceOnlyOk returns a tuple with the ReduceOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetReduceOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReduceOnly) {
		return nil, false
	}
	return o.ReduceOnly, true
}

// HasReduceOnly returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasReduceOnly() bool {
	if o != nil && !IsNil(o.ReduceOnly) {
		return true
	}

	return false
}

// SetReduceOnly gets a reference to the given bool and assigns it to the ReduceOnly field.
func (o *CreateTradeOrderV5Req) SetReduceOnly(v bool) {
	o.ReduceOnly = &v
}

// GetSide returns the Side field value
func (o *CreateTradeOrderV5Req) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *CreateTradeOrderV5Req) SetSide(v string) {
	o.Side = v
}

// GetStpId returns the StpId field value if set, zero value otherwise.
// Deprecated
func (o *CreateTradeOrderV5Req) GetStpId() string {
	if o == nil || IsNil(o.StpId) {
		var ret string
		return ret
	}
	return *o.StpId
}

// GetStpIdOk returns a tuple with the StpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateTradeOrderV5Req) GetStpIdOk() (*string, bool) {
	if o == nil || IsNil(o.StpId) {
		return nil, false
	}
	return o.StpId, true
}

// HasStpId returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasStpId() bool {
	if o != nil && !IsNil(o.StpId) {
		return true
	}

	return false
}

// SetStpId gets a reference to the given string and assigns it to the StpId field.
// Deprecated
func (o *CreateTradeOrderV5Req) SetStpId(v string) {
	o.StpId = &v
}

// GetStpMode returns the StpMode field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetStpMode() string {
	if o == nil || IsNil(o.StpMode) {
		var ret string
		return ret
	}
	return *o.StpMode
}

// GetStpModeOk returns a tuple with the StpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetStpModeOk() (*string, bool) {
	if o == nil || IsNil(o.StpMode) {
		return nil, false
	}
	return o.StpMode, true
}

// HasStpMode returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasStpMode() bool {
	if o != nil && !IsNil(o.StpMode) {
		return true
	}

	return false
}

// SetStpMode gets a reference to the given string and assigns it to the StpMode field.
func (o *CreateTradeOrderV5Req) SetStpMode(v string) {
	o.StpMode = &v
}

// GetSz returns the Sz field value
func (o *CreateTradeOrderV5Req) GetSz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sz
}

// GetSzOk returns a tuple with the Sz field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetSzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sz, true
}

// SetSz sets field value
func (o *CreateTradeOrderV5Req) SetSz(v string) {
	o.Sz = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateTradeOrderV5Req) SetTag(v string) {
	o.Tag = &v
}

// GetTdMode returns the TdMode field value
func (o *CreateTradeOrderV5Req) GetTdMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TdMode
}

// GetTdModeOk returns a tuple with the TdMode field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetTdModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TdMode, true
}

// SetTdMode sets field value
func (o *CreateTradeOrderV5Req) SetTdMode(v string) {
	o.TdMode = v
}

// GetTgtCcy returns the TgtCcy field value if set, zero value otherwise.
func (o *CreateTradeOrderV5Req) GetTgtCcy() string {
	if o == nil || IsNil(o.TgtCcy) {
		var ret string
		return ret
	}
	return *o.TgtCcy
}

// GetTgtCcyOk returns a tuple with the TgtCcy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderV5Req) GetTgtCcyOk() (*string, bool) {
	if o == nil || IsNil(o.TgtCcy) {
		return nil, false
	}
	return o.TgtCcy, true
}

// HasTgtCcy returns a boolean if a field has been set.
func (o *CreateTradeOrderV5Req) HasTgtCcy() bool {
	if o != nil && !IsNil(o.TgtCcy) {
		return true
	}

	return false
}

// SetTgtCcy gets a reference to the given string and assigns it to the TgtCcy field.
func (o *CreateTradeOrderV5Req) SetTgtCcy(v string) {
	o.TgtCcy = &v
}

func (o CreateTradeOrderV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeOrderV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachAlgoOrds) {
		toSerialize["attachAlgoOrds"] = o.AttachAlgoOrds
	}
	if !IsNil(o.BanAmend) {
		toSerialize["banAmend"] = o.BanAmend
	}
	if !IsNil(o.Ccy) {
		toSerialize["ccy"] = o.Ccy
	}
	if !IsNil(o.ClOrdId) {
		toSerialize["clOrdId"] = o.ClOrdId
	}
	toSerialize["instId"] = o.InstId
	toSerialize["ordType"] = o.OrdType
	if !IsNil(o.PosSide) {
		toSerialize["posSide"] = o.PosSide
	}
	if !IsNil(o.Px) {
		toSerialize["px"] = o.Px
	}
	if !IsNil(o.PxUsd) {
		toSerialize["pxUsd"] = o.PxUsd
	}
	if !IsNil(o.PxVol) {
		toSerialize["pxVol"] = o.PxVol
	}
	if !IsNil(o.QuickMgnType) {
		toSerialize["quickMgnType"] = o.QuickMgnType
	}
	if !IsNil(o.ReduceOnly) {
		toSerialize["reduceOnly"] = o.ReduceOnly
	}
	toSerialize["side"] = o.Side
	if !IsNil(o.StpId) {
		toSerialize["stpId"] = o.StpId
	}
	if !IsNil(o.StpMode) {
		toSerialize["stpMode"] = o.StpMode
	}
	toSerialize["sz"] = o.Sz
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["tdMode"] = o.TdMode
	if !IsNil(o.TgtCcy) {
		toSerialize["tgtCcy"] = o.TgtCcy
	}
	return toSerialize, nil
}

func (o *CreateTradeOrderV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
		"ordType",
		"side",
		"sz",
		"tdMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeOrderV5Req := _CreateTradeOrderV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeOrderV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeOrderV5Req(varCreateTradeOrderV5Req)

	return err
}

type NullableCreateTradeOrderV5Req struct {
	value *CreateTradeOrderV5Req
	isSet bool
}

func (v NullableCreateTradeOrderV5Req) Get() *CreateTradeOrderV5Req {
	return v.value
}

func (v *NullableCreateTradeOrderV5Req) Set(val *CreateTradeOrderV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeOrderV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeOrderV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeOrderV5Req(val *CreateTradeOrderV5Req) *NullableCreateTradeOrderV5Req {
	return &NullableCreateTradeOrderV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeOrderV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeOrderV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


