/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"fmt"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RecurringBuyAPIService RecurringBuyAPI service
type RecurringBuyAPIService service

type ApiCreateTradingBotRecurringAmendOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	createTradingBotRecurringAmendOrderAlgoV5Req *CreateTradingBotRecurringAmendOrderAlgoV5Req
}

// The request body for CreateTradingBotRecurringAmendOrderAlgoV5
func (r ApiCreateTradingBotRecurringAmendOrderAlgoV5Request) CreateTradingBotRecurringAmendOrderAlgoV5Req(createTradingBotRecurringAmendOrderAlgoV5Req CreateTradingBotRecurringAmendOrderAlgoV5Req) ApiCreateTradingBotRecurringAmendOrderAlgoV5Request {
	r.createTradingBotRecurringAmendOrderAlgoV5Req = &createTradingBotRecurringAmendOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotRecurringAmendOrderAlgoV5Request) Execute() (*CreateTradingBotRecurringAmendOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotRecurringAmendOrderAlgoV5Execute(r)
}

/*
CreateTradingBotRecurringAmendOrderAlgoV5 POST / Amend recurring buy order

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotRecurringAmendOrderAlgoV5Request
*/
func (a *RecurringBuyAPIService) CreateTradingBotRecurringAmendOrderAlgoV5(ctx context.Context) ApiCreateTradingBotRecurringAmendOrderAlgoV5Request {
	return ApiCreateTradingBotRecurringAmendOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotRecurringAmendOrderAlgoV5Resp
func (a *RecurringBuyAPIService) CreateTradingBotRecurringAmendOrderAlgoV5Execute(r ApiCreateTradingBotRecurringAmendOrderAlgoV5Request) (*CreateTradingBotRecurringAmendOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotRecurringAmendOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.CreateTradingBotRecurringAmendOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/amend-order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotRecurringAmendOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotRecurringAmendOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotRecurringAmendOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotRecurringOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	createTradingBotRecurringOrderAlgoV5Req *CreateTradingBotRecurringOrderAlgoV5Req
}

// The request body for CreateTradingBotRecurringOrderAlgoV5
func (r ApiCreateTradingBotRecurringOrderAlgoV5Request) CreateTradingBotRecurringOrderAlgoV5Req(createTradingBotRecurringOrderAlgoV5Req CreateTradingBotRecurringOrderAlgoV5Req) ApiCreateTradingBotRecurringOrderAlgoV5Request {
	r.createTradingBotRecurringOrderAlgoV5Req = &createTradingBotRecurringOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotRecurringOrderAlgoV5Request) Execute() (*CreateTradingBotRecurringOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotRecurringOrderAlgoV5Execute(r)
}

/*
CreateTradingBotRecurringOrderAlgoV5 POST / Place recurring buy order

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotRecurringOrderAlgoV5Request
*/
func (a *RecurringBuyAPIService) CreateTradingBotRecurringOrderAlgoV5(ctx context.Context) ApiCreateTradingBotRecurringOrderAlgoV5Request {
	return ApiCreateTradingBotRecurringOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotRecurringOrderAlgoV5Resp
func (a *RecurringBuyAPIService) CreateTradingBotRecurringOrderAlgoV5Execute(r ApiCreateTradingBotRecurringOrderAlgoV5Request) (*CreateTradingBotRecurringOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotRecurringOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.CreateTradingBotRecurringOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotRecurringOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotRecurringOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotRecurringOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTradingBotRecurringStopOrderAlgoV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	createTradingBotRecurringStopOrderAlgoV5Req *CreateTradingBotRecurringStopOrderAlgoV5Req
}

// The request body for CreateTradingBotRecurringStopOrderAlgoV5
func (r ApiCreateTradingBotRecurringStopOrderAlgoV5Request) CreateTradingBotRecurringStopOrderAlgoV5Req(createTradingBotRecurringStopOrderAlgoV5Req CreateTradingBotRecurringStopOrderAlgoV5Req) ApiCreateTradingBotRecurringStopOrderAlgoV5Request {
	r.createTradingBotRecurringStopOrderAlgoV5Req = &createTradingBotRecurringStopOrderAlgoV5Req
	return r
}

func (r ApiCreateTradingBotRecurringStopOrderAlgoV5Request) Execute() (*CreateTradingBotRecurringStopOrderAlgoV5Resp, *http.Response, error) {
	return r.ApiService.CreateTradingBotRecurringStopOrderAlgoV5Execute(r)
}

/*
CreateTradingBotRecurringStopOrderAlgoV5 POST / Stop recurring buy order

A maximum of 10 orders can be stopped per request.

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTradingBotRecurringStopOrderAlgoV5Request
*/
func (a *RecurringBuyAPIService) CreateTradingBotRecurringStopOrderAlgoV5(ctx context.Context) ApiCreateTradingBotRecurringStopOrderAlgoV5Request {
	return ApiCreateTradingBotRecurringStopOrderAlgoV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTradingBotRecurringStopOrderAlgoV5Resp
func (a *RecurringBuyAPIService) CreateTradingBotRecurringStopOrderAlgoV5Execute(r ApiCreateTradingBotRecurringStopOrderAlgoV5Request) (*CreateTradingBotRecurringStopOrderAlgoV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTradingBotRecurringStopOrderAlgoV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.CreateTradingBotRecurringStopOrderAlgoV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/stop-order-algo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTradingBotRecurringStopOrderAlgoV5Req == nil {
		return localVarReturnValue, nil, reportError("createTradingBotRecurringStopOrderAlgoV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTradingBotRecurringStopOrderAlgoV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	algoId *string
}

// Algo ID
func (r ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request) AlgoId(algoId string) ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request {
	r.algoId = &algoId
	return r
}

func (r ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request) Execute() (*GetTradingBotRecurringOrdersAlgoDetailsV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotRecurringOrdersAlgoDetailsV5Execute(r)
}

/*
GetTradingBotRecurringOrdersAlgoDetailsV5 GET / Recurring buy order details

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request
*/
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoDetailsV5(ctx context.Context) ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request {
	return ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotRecurringOrdersAlgoDetailsV5Resp
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoDetailsV5Execute(r ApiGetTradingBotRecurringOrdersAlgoDetailsV5Request) (*GetTradingBotRecurringOrdersAlgoDetailsV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotRecurringOrdersAlgoDetailsV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.GetTradingBotRecurringOrdersAlgoDetailsV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/orders-algo-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	algoId *string
	after *string
	before *string
	limit *string
}

// Algo ID
func (r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) AlgoId(algoId string) ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request {
	r.algoId = &algoId
	return r
}

// Pagination of data to return records earlier than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) After(after string) ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) Before(before string) ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100
func (r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) Limit(limit string) ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) Execute() (*GetTradingBotRecurringOrdersAlgoHistoryV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotRecurringOrdersAlgoHistoryV5Execute(r)
}

/*
GetTradingBotRecurringOrdersAlgoHistoryV5 GET / Recurring buy order history

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request
*/
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoHistoryV5(ctx context.Context) ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request {
	return ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotRecurringOrdersAlgoHistoryV5Resp
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoHistoryV5Execute(r ApiGetTradingBotRecurringOrdersAlgoHistoryV5Request) (*GetTradingBotRecurringOrdersAlgoHistoryV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotRecurringOrdersAlgoHistoryV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.GetTradingBotRecurringOrdersAlgoHistoryV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/orders-algo-history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.algoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	} else {
		var defaultValue string = ""
		r.algoId = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotRecurringOrdersAlgoPendingV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	algoId *string
	after *string
	before *string
	limit *string
}

// Algo ID
func (r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) AlgoId(algoId string) ApiGetTradingBotRecurringOrdersAlgoPendingV5Request {
	r.algoId = &algoId
	return r
}

// Pagination of data to return records earlier than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) After(after string) ApiGetTradingBotRecurringOrdersAlgoPendingV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) Before(before string) ApiGetTradingBotRecurringOrdersAlgoPendingV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100
func (r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) Limit(limit string) ApiGetTradingBotRecurringOrdersAlgoPendingV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) Execute() (*GetTradingBotRecurringOrdersAlgoPendingV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotRecurringOrdersAlgoPendingV5Execute(r)
}

/*
GetTradingBotRecurringOrdersAlgoPendingV5 GET / Recurring buy order list

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotRecurringOrdersAlgoPendingV5Request
*/
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoPendingV5(ctx context.Context) ApiGetTradingBotRecurringOrdersAlgoPendingV5Request {
	return ApiGetTradingBotRecurringOrdersAlgoPendingV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotRecurringOrdersAlgoPendingV5Resp
func (a *RecurringBuyAPIService) GetTradingBotRecurringOrdersAlgoPendingV5Execute(r ApiGetTradingBotRecurringOrdersAlgoPendingV5Request) (*GetTradingBotRecurringOrdersAlgoPendingV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotRecurringOrdersAlgoPendingV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.GetTradingBotRecurringOrdersAlgoPendingV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/orders-algo-pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.algoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	} else {
		var defaultValue string = ""
		r.algoId = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTradingBotRecurringSubOrdersV5Request struct {
	ctx context.Context
	ApiService *RecurringBuyAPIService
	algoId *string
	ordId *string
	after *string
	before *string
	limit *string
}

// Algo ID
func (r ApiGetTradingBotRecurringSubOrdersV5Request) AlgoId(algoId string) ApiGetTradingBotRecurringSubOrdersV5Request {
	r.algoId = &algoId
	return r
}

// Sub order ID
func (r ApiGetTradingBotRecurringSubOrdersV5Request) OrdId(ordId string) ApiGetTradingBotRecurringSubOrdersV5Request {
	r.ordId = &ordId
	return r
}

// Pagination of data to return records earlier than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringSubOrdersV5Request) After(after string) ApiGetTradingBotRecurringSubOrdersV5Request {
	r.after = &after
	return r
}

// Pagination of data to return records newer than the requested &#x60;algoId&#x60;.
func (r ApiGetTradingBotRecurringSubOrdersV5Request) Before(before string) ApiGetTradingBotRecurringSubOrdersV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100
func (r ApiGetTradingBotRecurringSubOrdersV5Request) Limit(limit string) ApiGetTradingBotRecurringSubOrdersV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetTradingBotRecurringSubOrdersV5Request) Execute() (*GetTradingBotRecurringSubOrdersV5Resp, *http.Response, error) {
	return r.ApiService.GetTradingBotRecurringSubOrdersV5Execute(r)
}

/*
GetTradingBotRecurringSubOrdersV5 GET / Recurring buy sub orders

#### Rate Limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTradingBotRecurringSubOrdersV5Request
*/
func (a *RecurringBuyAPIService) GetTradingBotRecurringSubOrdersV5(ctx context.Context) ApiGetTradingBotRecurringSubOrdersV5Request {
	return ApiGetTradingBotRecurringSubOrdersV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTradingBotRecurringSubOrdersV5Resp
func (a *RecurringBuyAPIService) GetTradingBotRecurringSubOrdersV5Execute(r ApiGetTradingBotRecurringSubOrdersV5Request) (*GetTradingBotRecurringSubOrdersV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTradingBotRecurringSubOrdersV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringBuyAPIService.GetTradingBotRecurringSubOrdersV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/tradingBot/recurring/sub-orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.algoId == nil {
		return localVarReturnValue, nil, reportError("algoId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "algoId", r.algoId, "form", "")
	if r.ordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordId", r.ordId, "form", "")
	} else {
		var defaultValue string = ""
		r.ordId = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = strings.TrimSpace(fmt.Sprintf("%s %s", localVarHTTPResponse.Status, *v.Msg))
			newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if *localVarReturnValue.Code != "0" {
		var v *APIError = &APIError{
			Code: localVarReturnValue.Code,
			Msg: localVarReturnValue.Msg,
		}
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: *localVarReturnValue.Msg,
			model: v,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
