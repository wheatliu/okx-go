/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradingBotSignalSubOrderV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradingBotSignalSubOrderV5Req{}

// CreateTradingBotSignalSubOrderV5Req struct for CreateTradingBotSignalSubOrderV5Req
type CreateTradingBotSignalSubOrderV5Req struct {
	// Algo ID
	AlgoId string `json:"algoId"`
	// Instrument ID, e.g. `BTC-USDT-SWAP`
	InstId string `json:"instId"`
	// Order type   `market`: Market order   `limit`: Limit order
	OrdType string `json:"ordType"`
	// Order price. Only applicable to `limit` order.
	Px *string `json:"px,omitempty"`
	// Whether orders can only reduce in position size.   Valid options: `true` or `false`. The default value is `false`.   Only applicable to `Spot and futures mode`/`Multi-currency margin`
	ReduceOnly *bool `json:"reduceOnly,omitempty"`
	// Order side, `buy` `sell`
	Side string `json:"side"`
	// Quantity to buy or sell
	Sz string `json:"sz"`
}

type _CreateTradingBotSignalSubOrderV5Req CreateTradingBotSignalSubOrderV5Req

// NewCreateTradingBotSignalSubOrderV5Req instantiates a new CreateTradingBotSignalSubOrderV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradingBotSignalSubOrderV5Req(algoId string, instId string, ordType string, side string, sz string) *CreateTradingBotSignalSubOrderV5Req {
	this := CreateTradingBotSignalSubOrderV5Req{}
	this.AlgoId = algoId
	this.InstId = instId
	this.OrdType = ordType
	var px string = ""
	this.Px = &px
	this.Side = side
	this.Sz = sz
	return &this
}

// NewCreateTradingBotSignalSubOrderV5ReqWithDefaults instantiates a new CreateTradingBotSignalSubOrderV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradingBotSignalSubOrderV5ReqWithDefaults() *CreateTradingBotSignalSubOrderV5Req {
	this := CreateTradingBotSignalSubOrderV5Req{}
	var algoId string = ""
	this.AlgoId = algoId
	var instId string = ""
	this.InstId = instId
	var ordType string = ""
	this.OrdType = ordType
	var px string = ""
	this.Px = &px
	var side string = ""
	this.Side = side
	var sz string = ""
	this.Sz = sz
	return &this
}

// GetAlgoId returns the AlgoId field value
func (o *CreateTradingBotSignalSubOrderV5Req) GetAlgoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlgoId
}

// GetAlgoIdOk returns a tuple with the AlgoId field value
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetAlgoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlgoId, true
}

// SetAlgoId sets field value
func (o *CreateTradingBotSignalSubOrderV5Req) SetAlgoId(v string) {
	o.AlgoId = v
}

// GetInstId returns the InstId field value
func (o *CreateTradingBotSignalSubOrderV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradingBotSignalSubOrderV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetOrdType returns the OrdType field value
func (o *CreateTradingBotSignalSubOrderV5Req) GetOrdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrdType
}

// GetOrdTypeOk returns a tuple with the OrdType field value
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetOrdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrdType, true
}

// SetOrdType sets field value
func (o *CreateTradingBotSignalSubOrderV5Req) SetOrdType(v string) {
	o.OrdType = v
}

// GetPx returns the Px field value if set, zero value otherwise.
func (o *CreateTradingBotSignalSubOrderV5Req) GetPx() string {
	if o == nil || IsNil(o.Px) {
		var ret string
		return ret
	}
	return *o.Px
}

// GetPxOk returns a tuple with the Px field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetPxOk() (*string, bool) {
	if o == nil || IsNil(o.Px) {
		return nil, false
	}
	return o.Px, true
}

// HasPx returns a boolean if a field has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) HasPx() bool {
	if o != nil && !IsNil(o.Px) {
		return true
	}

	return false
}

// SetPx gets a reference to the given string and assigns it to the Px field.
func (o *CreateTradingBotSignalSubOrderV5Req) SetPx(v string) {
	o.Px = &v
}

// GetReduceOnly returns the ReduceOnly field value if set, zero value otherwise.
func (o *CreateTradingBotSignalSubOrderV5Req) GetReduceOnly() bool {
	if o == nil || IsNil(o.ReduceOnly) {
		var ret bool
		return ret
	}
	return *o.ReduceOnly
}

// GetReduceOnlyOk returns a tuple with the ReduceOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetReduceOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReduceOnly) {
		return nil, false
	}
	return o.ReduceOnly, true
}

// HasReduceOnly returns a boolean if a field has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) HasReduceOnly() bool {
	if o != nil && !IsNil(o.ReduceOnly) {
		return true
	}

	return false
}

// SetReduceOnly gets a reference to the given bool and assigns it to the ReduceOnly field.
func (o *CreateTradingBotSignalSubOrderV5Req) SetReduceOnly(v bool) {
	o.ReduceOnly = &v
}

// GetSide returns the Side field value
func (o *CreateTradingBotSignalSubOrderV5Req) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *CreateTradingBotSignalSubOrderV5Req) SetSide(v string) {
	o.Side = v
}

// GetSz returns the Sz field value
func (o *CreateTradingBotSignalSubOrderV5Req) GetSz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sz
}

// GetSzOk returns a tuple with the Sz field value
// and a boolean to check if the value has been set.
func (o *CreateTradingBotSignalSubOrderV5Req) GetSzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sz, true
}

// SetSz sets field value
func (o *CreateTradingBotSignalSubOrderV5Req) SetSz(v string) {
	o.Sz = v
}

func (o CreateTradingBotSignalSubOrderV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradingBotSignalSubOrderV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algoId"] = o.AlgoId
	toSerialize["instId"] = o.InstId
	toSerialize["ordType"] = o.OrdType
	if !IsNil(o.Px) {
		toSerialize["px"] = o.Px
	}
	if !IsNil(o.ReduceOnly) {
		toSerialize["reduceOnly"] = o.ReduceOnly
	}
	toSerialize["side"] = o.Side
	toSerialize["sz"] = o.Sz
	return toSerialize, nil
}

func (o *CreateTradingBotSignalSubOrderV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algoId",
		"instId",
		"ordType",
		"side",
		"sz",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradingBotSignalSubOrderV5Req := _CreateTradingBotSignalSubOrderV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradingBotSignalSubOrderV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradingBotSignalSubOrderV5Req(varCreateTradingBotSignalSubOrderV5Req)

	return err
}

type NullableCreateTradingBotSignalSubOrderV5Req struct {
	value *CreateTradingBotSignalSubOrderV5Req
	isSet bool
}

func (v NullableCreateTradingBotSignalSubOrderV5Req) Get() *CreateTradingBotSignalSubOrderV5Req {
	return v.value
}

func (v *NullableCreateTradingBotSignalSubOrderV5Req) Set(val *CreateTradingBotSignalSubOrderV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradingBotSignalSubOrderV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradingBotSignalSubOrderV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradingBotSignalSubOrderV5Req(val *CreateTradingBotSignalSubOrderV5Req) *NullableCreateTradingBotSignalSubOrderV5Req {
	return &NullableCreateTradingBotSignalSubOrderV5Req{value: val, isSet: true}
}

func (v NullableCreateTradingBotSignalSubOrderV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradingBotSignalSubOrderV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


