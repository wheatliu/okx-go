/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFinanceStakingDefiPurchaseV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFinanceStakingDefiPurchaseV5Req{}

// CreateFinanceStakingDefiPurchaseV5Req struct for CreateFinanceStakingDefiPurchaseV5Req
type CreateFinanceStakingDefiPurchaseV5Req struct {
	// Investment data
	InvestData []CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner `json:"investData"`
	// Product ID
	ProductId string `json:"productId"`
	// Order tag  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
	Tag *string `json:"tag,omitempty"`
	// Investment term  Investment term must be specified for fixed-term product
	Term *string `json:"term,omitempty"`
}

type _CreateFinanceStakingDefiPurchaseV5Req CreateFinanceStakingDefiPurchaseV5Req

// NewCreateFinanceStakingDefiPurchaseV5Req instantiates a new CreateFinanceStakingDefiPurchaseV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFinanceStakingDefiPurchaseV5Req(investData []CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner, productId string) *CreateFinanceStakingDefiPurchaseV5Req {
	this := CreateFinanceStakingDefiPurchaseV5Req{}
	this.InvestData = investData
	this.ProductId = productId
	var tag string = ""
	this.Tag = &tag
	var term string = ""
	this.Term = &term
	return &this
}

// NewCreateFinanceStakingDefiPurchaseV5ReqWithDefaults instantiates a new CreateFinanceStakingDefiPurchaseV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFinanceStakingDefiPurchaseV5ReqWithDefaults() *CreateFinanceStakingDefiPurchaseV5Req {
	this := CreateFinanceStakingDefiPurchaseV5Req{}
	var productId string = ""
	this.ProductId = productId
	var tag string = ""
	this.Tag = &tag
	var term string = ""
	this.Term = &term
	return &this
}

// GetInvestData returns the InvestData field value
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetInvestData() []CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner {
	if o == nil {
		var ret []CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner
		return ret
	}

	return o.InvestData
}

// GetInvestDataOk returns a tuple with the InvestData field value
// and a boolean to check if the value has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetInvestDataOk() ([]CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvestData, true
}

// SetInvestData sets field value
func (o *CreateFinanceStakingDefiPurchaseV5Req) SetInvestData(v []CreateFinanceStakingDefiPurchaseV5ReqInvestDataInner) {
	o.InvestData = v
}

// GetProductId returns the ProductId field value
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CreateFinanceStakingDefiPurchaseV5Req) SetProductId(v string) {
	o.ProductId = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateFinanceStakingDefiPurchaseV5Req) SetTag(v string) {
	o.Tag = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetTerm() string {
	if o == nil || IsNil(o.Term) {
		var ret string
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) GetTermOk() (*string, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *CreateFinanceStakingDefiPurchaseV5Req) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given string and assigns it to the Term field.
func (o *CreateFinanceStakingDefiPurchaseV5Req) SetTerm(v string) {
	o.Term = &v
}

func (o CreateFinanceStakingDefiPurchaseV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFinanceStakingDefiPurchaseV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["investData"] = o.InvestData
	toSerialize["productId"] = o.ProductId
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	return toSerialize, nil
}

func (o *CreateFinanceStakingDefiPurchaseV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"investData",
		"productId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFinanceStakingDefiPurchaseV5Req := _CreateFinanceStakingDefiPurchaseV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFinanceStakingDefiPurchaseV5Req)

	if err != nil {
		return err
	}

	*o = CreateFinanceStakingDefiPurchaseV5Req(varCreateFinanceStakingDefiPurchaseV5Req)

	return err
}

type NullableCreateFinanceStakingDefiPurchaseV5Req struct {
	value *CreateFinanceStakingDefiPurchaseV5Req
	isSet bool
}

func (v NullableCreateFinanceStakingDefiPurchaseV5Req) Get() *CreateFinanceStakingDefiPurchaseV5Req {
	return v.value
}

func (v *NullableCreateFinanceStakingDefiPurchaseV5Req) Set(val *CreateFinanceStakingDefiPurchaseV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFinanceStakingDefiPurchaseV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFinanceStakingDefiPurchaseV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFinanceStakingDefiPurchaseV5Req(val *CreateFinanceStakingDefiPurchaseV5Req) *NullableCreateFinanceStakingDefiPurchaseV5Req {
	return &NullableCreateFinanceStakingDefiPurchaseV5Req{value: val, isSet: true}
}

func (v NullableCreateFinanceStakingDefiPurchaseV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFinanceStakingDefiPurchaseV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


