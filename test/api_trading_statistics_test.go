/*
Okx Rest API

Testing TradingStatisticsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/wheatliu/okx-go"
)

func Test_rest_TradingStatisticsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsLongShortAccountRatioContractTopTraderV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsLongShortAccountRatioContractTopTraderV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsLongShortAccountRatioContractV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsLongShortAccountRatioContractV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsLongShortAccountRatioV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsLongShortAccountRatioV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsLongShortPositionRatioContractTopTraderV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsLongShortPositionRatioContractTopTraderV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsOpenInterestHistoryV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsOpenInterestHistoryV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatContractsOpenInterestVolumeV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatContractsOpenInterestVolumeV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatMarginLoanRatioV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatMarginLoanRatioV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatOptionOpenInterestVolumeExpiryV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatOptionOpenInterestVolumeExpiryV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatOptionOpenInterestVolumeRatioV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatOptionOpenInterestVolumeRatioV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatOptionOpenInterestVolumeStrikeV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatOptionOpenInterestVolumeStrikeV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatOptionOpenInterestVolumeV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatOptionOpenInterestVolumeV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatOptionTakerBlockVolumeV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatOptionTakerBlockVolumeV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatTakerVolumeContractV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatTakerVolumeContractV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatTakerVolumeV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatTakerVolumeV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TradingStatisticsAPIService GetRubikStatTradingDataSupportCoinV5", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TradingStatisticsAPI.GetRubikStatTradingDataSupportCoinV5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
