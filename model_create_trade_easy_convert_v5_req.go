/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeEasyConvertV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeEasyConvertV5Req{}

// CreateTradeEasyConvertV5Req struct for CreateTradeEasyConvertV5Req
type CreateTradeEasyConvertV5Req struct {
	// Type of small payment currency convert from   Maximum 5 currencies can be selected in one order. If there are multiple currencies, separate them with commas.
	FromCcy []string `json:"fromCcy"`
	// Funding source  `1`: Trading account  `2`: Funding account  The default is `1`.
	Source *string `json:"source,omitempty"`
	// Type of mainstream currency convert to   Only one receiving currency type can be selected in one order and cannot be the same as the small payment currencies.
	ToCcy string `json:"toCcy"`
}

type _CreateTradeEasyConvertV5Req CreateTradeEasyConvertV5Req

// NewCreateTradeEasyConvertV5Req instantiates a new CreateTradeEasyConvertV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeEasyConvertV5Req(fromCcy []string, toCcy string) *CreateTradeEasyConvertV5Req {
	this := CreateTradeEasyConvertV5Req{}
	this.FromCcy = fromCcy
	var source string = ""
	this.Source = &source
	this.ToCcy = toCcy
	return &this
}

// NewCreateTradeEasyConvertV5ReqWithDefaults instantiates a new CreateTradeEasyConvertV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeEasyConvertV5ReqWithDefaults() *CreateTradeEasyConvertV5Req {
	this := CreateTradeEasyConvertV5Req{}
	var source string = ""
	this.Source = &source
	var toCcy string = ""
	this.ToCcy = toCcy
	return &this
}

// GetFromCcy returns the FromCcy field value
func (o *CreateTradeEasyConvertV5Req) GetFromCcy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FromCcy
}

// GetFromCcyOk returns a tuple with the FromCcy field value
// and a boolean to check if the value has been set.
func (o *CreateTradeEasyConvertV5Req) GetFromCcyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromCcy, true
}

// SetFromCcy sets field value
func (o *CreateTradeEasyConvertV5Req) SetFromCcy(v []string) {
	o.FromCcy = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CreateTradeEasyConvertV5Req) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeEasyConvertV5Req) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CreateTradeEasyConvertV5Req) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *CreateTradeEasyConvertV5Req) SetSource(v string) {
	o.Source = &v
}

// GetToCcy returns the ToCcy field value
func (o *CreateTradeEasyConvertV5Req) GetToCcy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCcy
}

// GetToCcyOk returns a tuple with the ToCcy field value
// and a boolean to check if the value has been set.
func (o *CreateTradeEasyConvertV5Req) GetToCcyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToCcy, true
}

// SetToCcy sets field value
func (o *CreateTradeEasyConvertV5Req) SetToCcy(v string) {
	o.ToCcy = v
}

func (o CreateTradeEasyConvertV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeEasyConvertV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromCcy"] = o.FromCcy
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["toCcy"] = o.ToCcy
	return toSerialize, nil
}

func (o *CreateTradeEasyConvertV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromCcy",
		"toCcy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeEasyConvertV5Req := _CreateTradeEasyConvertV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeEasyConvertV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeEasyConvertV5Req(varCreateTradeEasyConvertV5Req)

	return err
}

type NullableCreateTradeEasyConvertV5Req struct {
	value *CreateTradeEasyConvertV5Req
	isSet bool
}

func (v NullableCreateTradeEasyConvertV5Req) Get() *CreateTradeEasyConvertV5Req {
	return v.value
}

func (v *NullableCreateTradeEasyConvertV5Req) Set(val *CreateTradeEasyConvertV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeEasyConvertV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeEasyConvertV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeEasyConvertV5Req(val *CreateTradeEasyConvertV5Req) *NullableCreateTradeEasyConvertV5Req {
	return &NullableCreateTradeEasyConvertV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeEasyConvertV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeEasyConvertV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


