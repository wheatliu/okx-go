/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeClosePositionV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeClosePositionV5Req{}

// CreateTradeClosePositionV5Req struct for CreateTradeClosePositionV5Req
type CreateTradeClosePositionV5Req struct {
	// Whether any pending orders for closing out needs to be automatically canceled when close position via a market order.  `false` or `true`, the default is `false`.
	AutoCxl *bool `json:"autoCxl,omitempty"`
	// Margin currency, required in the case of closing `cross` `MARGIN` position for `Spot and futures mode`.
	Ccy *string `json:"ccy,omitempty"`
	// Client-supplied ID  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
	ClOrdId *string `json:"clOrdId,omitempty"`
	// Instrument ID
	InstId string `json:"instId"`
	// Margin mode  `cross` `isolated`
	MgnMode string `json:"mgnMode"`
	// Position side   This parameter can be omitted in `net` mode, and the default value is `net`. You can only fill with `net`.  This parameter must be filled in under the `long/short` mode. Fill in `long` for close-long and `short` for close-short.
	PosSide *string `json:"posSide,omitempty"`
	// Order tag  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
	Tag *string `json:"tag,omitempty"`
}

type _CreateTradeClosePositionV5Req CreateTradeClosePositionV5Req

// NewCreateTradeClosePositionV5Req instantiates a new CreateTradeClosePositionV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeClosePositionV5Req(instId string, mgnMode string) *CreateTradeClosePositionV5Req {
	this := CreateTradeClosePositionV5Req{}
	var ccy string = ""
	this.Ccy = &ccy
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	this.InstId = instId
	this.MgnMode = mgnMode
	var posSide string = ""
	this.PosSide = &posSide
	var tag string = ""
	this.Tag = &tag
	return &this
}

// NewCreateTradeClosePositionV5ReqWithDefaults instantiates a new CreateTradeClosePositionV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeClosePositionV5ReqWithDefaults() *CreateTradeClosePositionV5Req {
	this := CreateTradeClosePositionV5Req{}
	var ccy string = ""
	this.Ccy = &ccy
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	var instId string = ""
	this.InstId = instId
	var mgnMode string = ""
	this.MgnMode = mgnMode
	var posSide string = ""
	this.PosSide = &posSide
	var tag string = ""
	this.Tag = &tag
	return &this
}

// GetAutoCxl returns the AutoCxl field value if set, zero value otherwise.
func (o *CreateTradeClosePositionV5Req) GetAutoCxl() bool {
	if o == nil || IsNil(o.AutoCxl) {
		var ret bool
		return ret
	}
	return *o.AutoCxl
}

// GetAutoCxlOk returns a tuple with the AutoCxl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetAutoCxlOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCxl) {
		return nil, false
	}
	return o.AutoCxl, true
}

// HasAutoCxl returns a boolean if a field has been set.
func (o *CreateTradeClosePositionV5Req) HasAutoCxl() bool {
	if o != nil && !IsNil(o.AutoCxl) {
		return true
	}

	return false
}

// SetAutoCxl gets a reference to the given bool and assigns it to the AutoCxl field.
func (o *CreateTradeClosePositionV5Req) SetAutoCxl(v bool) {
	o.AutoCxl = &v
}

// GetCcy returns the Ccy field value if set, zero value otherwise.
func (o *CreateTradeClosePositionV5Req) GetCcy() string {
	if o == nil || IsNil(o.Ccy) {
		var ret string
		return ret
	}
	return *o.Ccy
}

// GetCcyOk returns a tuple with the Ccy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetCcyOk() (*string, bool) {
	if o == nil || IsNil(o.Ccy) {
		return nil, false
	}
	return o.Ccy, true
}

// HasCcy returns a boolean if a field has been set.
func (o *CreateTradeClosePositionV5Req) HasCcy() bool {
	if o != nil && !IsNil(o.Ccy) {
		return true
	}

	return false
}

// SetCcy gets a reference to the given string and assigns it to the Ccy field.
func (o *CreateTradeClosePositionV5Req) SetCcy(v string) {
	o.Ccy = &v
}

// GetClOrdId returns the ClOrdId field value if set, zero value otherwise.
func (o *CreateTradeClosePositionV5Req) GetClOrdId() string {
	if o == nil || IsNil(o.ClOrdId) {
		var ret string
		return ret
	}
	return *o.ClOrdId
}

// GetClOrdIdOk returns a tuple with the ClOrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetClOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClOrdId) {
		return nil, false
	}
	return o.ClOrdId, true
}

// HasClOrdId returns a boolean if a field has been set.
func (o *CreateTradeClosePositionV5Req) HasClOrdId() bool {
	if o != nil && !IsNil(o.ClOrdId) {
		return true
	}

	return false
}

// SetClOrdId gets a reference to the given string and assigns it to the ClOrdId field.
func (o *CreateTradeClosePositionV5Req) SetClOrdId(v string) {
	o.ClOrdId = &v
}

// GetInstId returns the InstId field value
func (o *CreateTradeClosePositionV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradeClosePositionV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetMgnMode returns the MgnMode field value
func (o *CreateTradeClosePositionV5Req) GetMgnMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MgnMode
}

// GetMgnModeOk returns a tuple with the MgnMode field value
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetMgnModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MgnMode, true
}

// SetMgnMode sets field value
func (o *CreateTradeClosePositionV5Req) SetMgnMode(v string) {
	o.MgnMode = v
}

// GetPosSide returns the PosSide field value if set, zero value otherwise.
func (o *CreateTradeClosePositionV5Req) GetPosSide() string {
	if o == nil || IsNil(o.PosSide) {
		var ret string
		return ret
	}
	return *o.PosSide
}

// GetPosSideOk returns a tuple with the PosSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetPosSideOk() (*string, bool) {
	if o == nil || IsNil(o.PosSide) {
		return nil, false
	}
	return o.PosSide, true
}

// HasPosSide returns a boolean if a field has been set.
func (o *CreateTradeClosePositionV5Req) HasPosSide() bool {
	if o != nil && !IsNil(o.PosSide) {
		return true
	}

	return false
}

// SetPosSide gets a reference to the given string and assigns it to the PosSide field.
func (o *CreateTradeClosePositionV5Req) SetPosSide(v string) {
	o.PosSide = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateTradeClosePositionV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeClosePositionV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateTradeClosePositionV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateTradeClosePositionV5Req) SetTag(v string) {
	o.Tag = &v
}

func (o CreateTradeClosePositionV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeClosePositionV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoCxl) {
		toSerialize["autoCxl"] = o.AutoCxl
	}
	if !IsNil(o.Ccy) {
		toSerialize["ccy"] = o.Ccy
	}
	if !IsNil(o.ClOrdId) {
		toSerialize["clOrdId"] = o.ClOrdId
	}
	toSerialize["instId"] = o.InstId
	toSerialize["mgnMode"] = o.MgnMode
	if !IsNil(o.PosSide) {
		toSerialize["posSide"] = o.PosSide
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *CreateTradeClosePositionV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
		"mgnMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeClosePositionV5Req := _CreateTradeClosePositionV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeClosePositionV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeClosePositionV5Req(varCreateTradeClosePositionV5Req)

	return err
}

type NullableCreateTradeClosePositionV5Req struct {
	value *CreateTradeClosePositionV5Req
	isSet bool
}

func (v NullableCreateTradeClosePositionV5Req) Get() *CreateTradeClosePositionV5Req {
	return v.value
}

func (v *NullableCreateTradeClosePositionV5Req) Set(val *CreateTradeClosePositionV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeClosePositionV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeClosePositionV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeClosePositionV5Req(val *CreateTradeClosePositionV5Req) *NullableCreateTradeClosePositionV5Req {
	return &NullableCreateTradeClosePositionV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeClosePositionV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeClosePositionV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


