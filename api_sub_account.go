/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SubAccountAPIService SubAccountAPI service
type SubAccountAPIService service

type ApiCreateAssetSubaccountTransferV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	createAssetSubaccountTransferV5Req *CreateAssetSubaccountTransferV5Req
}

// The request body for CreateAssetSubaccountTransferV5
func (r ApiCreateAssetSubaccountTransferV5Request) CreateAssetSubaccountTransferV5Req(createAssetSubaccountTransferV5Req CreateAssetSubaccountTransferV5Req) ApiCreateAssetSubaccountTransferV5Request {
	r.createAssetSubaccountTransferV5Req = &createAssetSubaccountTransferV5Req
	return r
}

func (r ApiCreateAssetSubaccountTransferV5Request) Execute() (*CreateAssetSubaccountTransferV5Resp, *http.Response, error) {
	return r.ApiService.CreateAssetSubaccountTransferV5Execute(r)
}

/*
CreateAssetSubaccountTransferV5 Applies to master accounts only.   Only API keys with `Trade` privilege can call this endpoint.  

Applies to master accounts only. 

Only API keys with `Trade` privilege can call this endpoint.

#### Rate limit：1 request per second 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAssetSubaccountTransferV5Request
*/
func (a *SubAccountAPIService) CreateAssetSubaccountTransferV5(ctx context.Context) ApiCreateAssetSubaccountTransferV5Request {
	return ApiCreateAssetSubaccountTransferV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAssetSubaccountTransferV5Resp
func (a *SubAccountAPIService) CreateAssetSubaccountTransferV5Execute(r ApiCreateAssetSubaccountTransferV5Request) (*CreateAssetSubaccountTransferV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAssetSubaccountTransferV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.CreateAssetSubaccountTransferV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/asset/subaccount/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAssetSubaccountTransferV5Req == nil {
		return localVarReturnValue, nil, reportError("createAssetSubaccountTransferV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAssetSubaccountTransferV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUsersSubaccountModifyApikeyV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	createUsersSubaccountModifyApikeyV5Req *CreateUsersSubaccountModifyApikeyV5Req
}

// The request body for CreateUsersSubaccountModifyApikeyV5
func (r ApiCreateUsersSubaccountModifyApikeyV5Request) CreateUsersSubaccountModifyApikeyV5Req(createUsersSubaccountModifyApikeyV5Req CreateUsersSubaccountModifyApikeyV5Req) ApiCreateUsersSubaccountModifyApikeyV5Request {
	r.createUsersSubaccountModifyApikeyV5Req = &createUsersSubaccountModifyApikeyV5Req
	return r
}

func (r ApiCreateUsersSubaccountModifyApikeyV5Request) Execute() (*CreateUsersSubaccountModifyApikeyV5Resp, *http.Response, error) {
	return r.ApiService.CreateUsersSubaccountModifyApikeyV5Execute(r)
}

/*
CreateUsersSubaccountModifyApikeyV5 Applies to master accounts only and master accounts API Key must be linked to IP addresses. Only API keys with `Trade` privilege can call this endpoint.  

Applies to master accounts only and master accounts API Key must be linked to IP addresses. Only API keys with `Trade` privilege can call this endpoint.

#### Rate limit：1 request per second 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUsersSubaccountModifyApikeyV5Request
*/
func (a *SubAccountAPIService) CreateUsersSubaccountModifyApikeyV5(ctx context.Context) ApiCreateUsersSubaccountModifyApikeyV5Request {
	return ApiCreateUsersSubaccountModifyApikeyV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateUsersSubaccountModifyApikeyV5Resp
func (a *SubAccountAPIService) CreateUsersSubaccountModifyApikeyV5Execute(r ApiCreateUsersSubaccountModifyApikeyV5Request) (*CreateUsersSubaccountModifyApikeyV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateUsersSubaccountModifyApikeyV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.CreateUsersSubaccountModifyApikeyV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/users/subaccount/modify-apikey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createUsersSubaccountModifyApikeyV5Req == nil {
		return localVarReturnValue, nil, reportError("createUsersSubaccountModifyApikeyV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUsersSubaccountModifyApikeyV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUsersSubaccountSetTransferOutV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	createUsersSubaccountSetTransferOutV5Req *CreateUsersSubaccountSetTransferOutV5Req
}

// The request body for CreateUsersSubaccountSetTransferOutV5
func (r ApiCreateUsersSubaccountSetTransferOutV5Request) CreateUsersSubaccountSetTransferOutV5Req(createUsersSubaccountSetTransferOutV5Req CreateUsersSubaccountSetTransferOutV5Req) ApiCreateUsersSubaccountSetTransferOutV5Request {
	r.createUsersSubaccountSetTransferOutV5Req = &createUsersSubaccountSetTransferOutV5Req
	return r
}

func (r ApiCreateUsersSubaccountSetTransferOutV5Request) Execute() (*CreateUsersSubaccountSetTransferOutV5Resp, *http.Response, error) {
	return r.ApiService.CreateUsersSubaccountSetTransferOutV5Execute(r)
}

/*
CreateUsersSubaccountSetTransferOutV5 Set permission of transfer out for sub-account (only applicable to master account API key). Sub-account can transfer out to master account by default.  

Set permission of transfer out for sub-account (only applicable to master account API key). Sub-account can transfer out to master account by default.

#### Rate Limit: 1 request per second 

#### Rate limit rule: User ID 

#### Permission: Trade 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUsersSubaccountSetTransferOutV5Request
*/
func (a *SubAccountAPIService) CreateUsersSubaccountSetTransferOutV5(ctx context.Context) ApiCreateUsersSubaccountSetTransferOutV5Request {
	return ApiCreateUsersSubaccountSetTransferOutV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateUsersSubaccountSetTransferOutV5Resp
func (a *SubAccountAPIService) CreateUsersSubaccountSetTransferOutV5Execute(r ApiCreateUsersSubaccountSetTransferOutV5Request) (*CreateUsersSubaccountSetTransferOutV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateUsersSubaccountSetTransferOutV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.CreateUsersSubaccountSetTransferOutV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/users/subaccount/set-transfer-out"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createUsersSubaccountSetTransferOutV5Req == nil {
		return localVarReturnValue, nil, reportError("createUsersSubaccountSetTransferOutV5Req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUsersSubaccountSetTransferOutV5Req
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountSubaccountBalancesV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	subAcct *string
}

// Sub-account name
func (r ApiGetAccountSubaccountBalancesV5Request) SubAcct(subAcct string) ApiGetAccountSubaccountBalancesV5Request {
	r.subAcct = &subAcct
	return r
}

func (r ApiGetAccountSubaccountBalancesV5Request) Execute() (*GetAccountSubaccountBalancesV5Resp, *http.Response, error) {
	return r.ApiService.GetAccountSubaccountBalancesV5Execute(r)
}

/*
GetAccountSubaccountBalancesV5 Query detailed balance info of Trading Account of a sub-account via the master account (applies to master accounts only)  

Query detailed balance info of Trading Account of a sub-account via the master account (applies to master accounts only)

#### Rate limit：6 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountSubaccountBalancesV5Request
*/
func (a *SubAccountAPIService) GetAccountSubaccountBalancesV5(ctx context.Context) ApiGetAccountSubaccountBalancesV5Request {
	return ApiGetAccountSubaccountBalancesV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAccountSubaccountBalancesV5Resp
func (a *SubAccountAPIService) GetAccountSubaccountBalancesV5Execute(r ApiGetAccountSubaccountBalancesV5Request) (*GetAccountSubaccountBalancesV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAccountSubaccountBalancesV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetAccountSubaccountBalancesV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/account/subaccount/balances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subAcct == nil {
		return localVarReturnValue, nil, reportError("subAcct is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountSubaccountMaxWithdrawalV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	subAcct *string
	ccy *string
}

// Sub-account name
func (r ApiGetAccountSubaccountMaxWithdrawalV5Request) SubAcct(subAcct string) ApiGetAccountSubaccountMaxWithdrawalV5Request {
	r.subAcct = &subAcct
	return r
}

// Single currency or multiple currencies (no more than 20) separated with comma, e.g. &#x60;BTC&#x60; or &#x60;BTC,ETH&#x60;.
func (r ApiGetAccountSubaccountMaxWithdrawalV5Request) Ccy(ccy string) ApiGetAccountSubaccountMaxWithdrawalV5Request {
	r.ccy = &ccy
	return r
}

func (r ApiGetAccountSubaccountMaxWithdrawalV5Request) Execute() (*GetAccountSubaccountMaxWithdrawalV5Resp, *http.Response, error) {
	return r.ApiService.GetAccountSubaccountMaxWithdrawalV5Execute(r)
}

/*
GetAccountSubaccountMaxWithdrawalV5 Retrieve the maximum withdrawal information of a sub-account via the master account (applies to master accounts only). If no currency is specified, the transferable amount of all owned currencies will be returned.  

Retrieve the maximum withdrawal information of a sub-account via the master account (applies to master accounts only). If no currency is specified, the transferable amount of all owned currencies will be returned.

#### Rate limit: 20 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountSubaccountMaxWithdrawalV5Request
*/
func (a *SubAccountAPIService) GetAccountSubaccountMaxWithdrawalV5(ctx context.Context) ApiGetAccountSubaccountMaxWithdrawalV5Request {
	return ApiGetAccountSubaccountMaxWithdrawalV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAccountSubaccountMaxWithdrawalV5Resp
func (a *SubAccountAPIService) GetAccountSubaccountMaxWithdrawalV5Execute(r ApiGetAccountSubaccountMaxWithdrawalV5Request) (*GetAccountSubaccountMaxWithdrawalV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAccountSubaccountMaxWithdrawalV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetAccountSubaccountMaxWithdrawalV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/account/subaccount/max-withdrawal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subAcct == nil {
		return localVarReturnValue, nil, reportError("subAcct is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	if r.ccy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ccy", r.ccy, "form", "")
	} else {
		var defaultValue string = ""
		r.ccy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssetSubaccountBalancesV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	subAcct *string
	ccy *string
}

// Sub-account name
func (r ApiGetAssetSubaccountBalancesV5Request) SubAcct(subAcct string) ApiGetAssetSubaccountBalancesV5Request {
	r.subAcct = &subAcct
	return r
}

// Single currency or multiple currencies (no more than 20) separated with comma, e.g. &#x60;BTC&#x60; or &#x60;BTC,ETH&#x60;.
func (r ApiGetAssetSubaccountBalancesV5Request) Ccy(ccy string) ApiGetAssetSubaccountBalancesV5Request {
	r.ccy = &ccy
	return r
}

func (r ApiGetAssetSubaccountBalancesV5Request) Execute() (*GetAssetSubaccountBalancesV5Resp, *http.Response, error) {
	return r.ApiService.GetAssetSubaccountBalancesV5Execute(r)
}

/*
GetAssetSubaccountBalancesV5 Query detailed balance info of Funding Account of a sub-account via the master account (applies to master accounts only)  

Query detailed balance info of Funding Account of a sub-account via the master account (applies to master accounts only)

#### Rate limit：6 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAssetSubaccountBalancesV5Request
*/
func (a *SubAccountAPIService) GetAssetSubaccountBalancesV5(ctx context.Context) ApiGetAssetSubaccountBalancesV5Request {
	return ApiGetAssetSubaccountBalancesV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAssetSubaccountBalancesV5Resp
func (a *SubAccountAPIService) GetAssetSubaccountBalancesV5Execute(r ApiGetAssetSubaccountBalancesV5Request) (*GetAssetSubaccountBalancesV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAssetSubaccountBalancesV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetAssetSubaccountBalancesV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/asset/subaccount/balances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subAcct == nil {
		return localVarReturnValue, nil, reportError("subAcct is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	if r.ccy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ccy", r.ccy, "form", "")
	} else {
		var defaultValue string = ""
		r.ccy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssetSubaccountBillsV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	ccy *string
	type_ *string
	subAcct *string
	after *string
	before *string
	limit *string
}

// Currency, such as BTC
func (r ApiGetAssetSubaccountBillsV5Request) Ccy(ccy string) ApiGetAssetSubaccountBillsV5Request {
	r.ccy = &ccy
	return r
}

// Transfer type  &#x60;0&#x60;: Transfers from master account to sub-account  &#x60;1&#x60; : Transfers from sub-account to master account.
func (r ApiGetAssetSubaccountBillsV5Request) Type_(type_ string) ApiGetAssetSubaccountBillsV5Request {
	r.type_ = &type_
	return r
}

// Sub-account name
func (r ApiGetAssetSubaccountBillsV5Request) SubAcct(subAcct string) ApiGetAssetSubaccountBillsV5Request {
	r.subAcct = &subAcct
	return r
}

// Query the data prior to the requested bill ID creation time (exclude), the value should be a Unix timestamp in millisecond format. e.g. &#x60;1597026383085&#x60;
func (r ApiGetAssetSubaccountBillsV5Request) After(after string) ApiGetAssetSubaccountBillsV5Request {
	r.after = &after
	return r
}

// Query the data after the requested bill ID creation time (exclude), the value should be a Unix timestamp in millisecond format. e.g. &#x60;1597026383085&#x60;
func (r ApiGetAssetSubaccountBillsV5Request) Before(before string) ApiGetAssetSubaccountBillsV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100.
func (r ApiGetAssetSubaccountBillsV5Request) Limit(limit string) ApiGetAssetSubaccountBillsV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetAssetSubaccountBillsV5Request) Execute() (*GetAssetSubaccountBillsV5Resp, *http.Response, error) {
	return r.ApiService.GetAssetSubaccountBillsV5Execute(r)
}

/*
GetAssetSubaccountBillsV5 Applies to master accounts only.  

Applies to master accounts only.

#### Rate limit：6 requests per second 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAssetSubaccountBillsV5Request
*/
func (a *SubAccountAPIService) GetAssetSubaccountBillsV5(ctx context.Context) ApiGetAssetSubaccountBillsV5Request {
	return ApiGetAssetSubaccountBillsV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAssetSubaccountBillsV5Resp
func (a *SubAccountAPIService) GetAssetSubaccountBillsV5Execute(r ApiGetAssetSubaccountBillsV5Request) (*GetAssetSubaccountBillsV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAssetSubaccountBillsV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetAssetSubaccountBillsV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/asset/subaccount/bills"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ccy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ccy", r.ccy, "form", "")
	} else {
		var defaultValue string = ""
		r.ccy = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	} else {
		var defaultValue string = ""
		r.type_ = &defaultValue
	}
	if r.subAcct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	} else {
		var defaultValue string = ""
		r.subAcct = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssetSubaccountManagedSubaccountBillsV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	ccy *string
	type_ *string
	subAcct *string
	subUid *string
	after *string
	before *string
	limit *string
}

// Currency, e.g &#x60;BTC&#x60;
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) Ccy(ccy string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.ccy = &ccy
	return r
}

// Transfer type  &#x60;0&#x60;: Transfers from master account to sub-account  &#x60;1&#x60;: Transfers from sub-account to master account
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) Type_(type_ string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.type_ = &type_
	return r
}

// Sub-account name
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) SubAcct(subAcct string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.subAcct = &subAcct
	return r
}

// Sub-account UID
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) SubUid(subUid string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.subUid = &subUid
	return r
}

// Query the data prior to the requested bill ID creation time (exclude), Unix timestamp in millisecond format, e.g. &#x60;1597026383085&#x60;
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) After(after string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.after = &after
	return r
}

// Query the data after the requested bill ID creation time (exclude), Unix timestamp in millisecond format, e.g. &#x60;1597026383085&#x60;
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) Before(before string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100.
func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) Limit(limit string) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) Execute() (*GetAssetSubaccountManagedSubaccountBillsV5Resp, *http.Response, error) {
	return r.ApiService.GetAssetSubaccountManagedSubaccountBillsV5Execute(r)
}

/*
GetAssetSubaccountManagedSubaccountBillsV5 Only applicable to the trading team's master account to getting transfer records of managed sub accounts entrusted to oneself.  

Only applicable to the trading team's master account to getting transfer records of managed sub accounts entrusted to oneself.

#### Rate limit：6 requests per second 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAssetSubaccountManagedSubaccountBillsV5Request
*/
func (a *SubAccountAPIService) GetAssetSubaccountManagedSubaccountBillsV5(ctx context.Context) ApiGetAssetSubaccountManagedSubaccountBillsV5Request {
	return ApiGetAssetSubaccountManagedSubaccountBillsV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAssetSubaccountManagedSubaccountBillsV5Resp
func (a *SubAccountAPIService) GetAssetSubaccountManagedSubaccountBillsV5Execute(r ApiGetAssetSubaccountManagedSubaccountBillsV5Request) (*GetAssetSubaccountManagedSubaccountBillsV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAssetSubaccountManagedSubaccountBillsV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetAssetSubaccountManagedSubaccountBillsV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/asset/subaccount/managed-subaccount-bills"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ccy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ccy", r.ccy, "form", "")
	} else {
		var defaultValue string = ""
		r.ccy = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	} else {
		var defaultValue string = ""
		r.type_ = &defaultValue
	}
	if r.subAcct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	} else {
		var defaultValue string = ""
		r.subAcct = &defaultValue
	}
	if r.subUid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subUid", r.subUid, "form", "")
	} else {
		var defaultValue string = ""
		r.subUid = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersEntrustSubaccountListV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	subAcct *string
}

// Sub-account name
func (r ApiGetUsersEntrustSubaccountListV5Request) SubAcct(subAcct string) ApiGetUsersEntrustSubaccountListV5Request {
	r.subAcct = &subAcct
	return r
}

func (r ApiGetUsersEntrustSubaccountListV5Request) Execute() (*GetUsersEntrustSubaccountListV5Resp, *http.Response, error) {
	return r.ApiService.GetUsersEntrustSubaccountListV5Execute(r)
}

/*
GetUsersEntrustSubaccountListV5 The trading team uses this interface to view the list of sub-accounts currently under escrow  

The trading team uses this interface to view the list of sub-accounts currently under escrow

#### Rate limit：1 request per second 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUsersEntrustSubaccountListV5Request
*/
func (a *SubAccountAPIService) GetUsersEntrustSubaccountListV5(ctx context.Context) ApiGetUsersEntrustSubaccountListV5Request {
	return ApiGetUsersEntrustSubaccountListV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetUsersEntrustSubaccountListV5Resp
func (a *SubAccountAPIService) GetUsersEntrustSubaccountListV5Execute(r ApiGetUsersEntrustSubaccountListV5Request) (*GetUsersEntrustSubaccountListV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetUsersEntrustSubaccountListV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetUsersEntrustSubaccountListV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/users/entrust-subaccount-list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subAcct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	} else {
		var defaultValue string = ""
		r.subAcct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersSubaccountListV5Request struct {
	ctx context.Context
	ApiService *SubAccountAPIService
	enable *string
	subAcct *string
	after *string
	before *string
	limit *string
}

// Sub-account status   &#x60;true&#x60;: Normal  &#x60;false&#x60;: Frozen
func (r ApiGetUsersSubaccountListV5Request) Enable(enable string) ApiGetUsersSubaccountListV5Request {
	r.enable = &enable
	return r
}

// Sub-account name
func (r ApiGetUsersSubaccountListV5Request) SubAcct(subAcct string) ApiGetUsersSubaccountListV5Request {
	r.subAcct = &subAcct
	return r
}

// Query the data earlier than the requested subaccount creation timestamp, the value should be a Unix timestamp in millisecond format. e.g. &#x60;1597026383085&#x60;
func (r ApiGetUsersSubaccountListV5Request) After(after string) ApiGetUsersSubaccountListV5Request {
	r.after = &after
	return r
}

// Query the data newer than the requested subaccount creation timestamp, the value should be a Unix timestamp in millisecond format. e.g. &#x60;1597026383085&#x60;
func (r ApiGetUsersSubaccountListV5Request) Before(before string) ApiGetUsersSubaccountListV5Request {
	r.before = &before
	return r
}

// Number of results per request. The maximum is 100. The default is 100.
func (r ApiGetUsersSubaccountListV5Request) Limit(limit string) ApiGetUsersSubaccountListV5Request {
	r.limit = &limit
	return r
}

func (r ApiGetUsersSubaccountListV5Request) Execute() (*GetUsersSubaccountListV5Resp, *http.Response, error) {
	return r.ApiService.GetUsersSubaccountListV5Execute(r)
}

/*
GetUsersSubaccountListV5 Applies to master accounts only  

Applies to master accounts only

#### Rate limit：2 requests per 2 seconds 

#### Rate limit rule: User ID 

#### Permission: Read 



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUsersSubaccountListV5Request
*/
func (a *SubAccountAPIService) GetUsersSubaccountListV5(ctx context.Context) ApiGetUsersSubaccountListV5Request {
	return ApiGetUsersSubaccountListV5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetUsersSubaccountListV5Resp
func (a *SubAccountAPIService) GetUsersSubaccountListV5Execute(r ApiGetUsersSubaccountListV5Request) (*GetUsersSubaccountListV5Resp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetUsersSubaccountListV5Resp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubAccountAPIService.GetUsersSubaccountListV5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v5/users/subaccount/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.enable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enable", r.enable, "form", "")
	} else {
		var defaultValue string = ""
		r.enable = &defaultValue
	}
	if r.subAcct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subAcct", r.subAcct, "form", "")
	} else {
		var defaultValue string = ""
		r.subAcct = &defaultValue
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	} else {
		var defaultValue string = ""
		r.after = &defaultValue
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "form", "")
	} else {
		var defaultValue string = ""
		r.before = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue string = ""
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextOKXAuth).(Auth); ok {
			localVarHeaderParams["OK-ACCESS-KEY"] = auth.APIKey
			localVarHeaderParams["OK-ACCESS-PASSPHRASE"] = auth.Passphrase
		}
	}
	
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = &v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
