/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeAmendOrderV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeAmendOrderV5Req{}

// CreateTradeAmendOrderV5Req struct for CreateTradeAmendOrderV5Req
type CreateTradeAmendOrderV5Req struct {
	// TP/SL information attached when placing order
	AttachAlgoOrds []CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner `json:"attachAlgoOrds,omitempty"`
	// Client Order ID as assigned by the client
	ClOrdId *string `json:"clOrdId,omitempty"`
	// Whether the order needs to be automatically canceled when the order amendment fails    Valid options: `false` or `true`, the default is `false`.
	CxlOnFail *bool `json:"cxlOnFail,omitempty"`
	// Instrument ID
	InstId string `json:"instId"`
	// New price after amendment.   When modifying options orders, users can only fill in one of the following: newPx, newPxUsd, or newPxVol. It must be consistent with parameters when placing orders. For example, if users placed the order using px, they should use newPx when modifying the order.
	NewPx *string `json:"newPx,omitempty"`
	// Modify options orders using USD prices   Only applicable to options.   When modifying options orders, users can only fill in one of the following: newPx, newPxUsd, or newPxVol.
	NewPxUsd *string `json:"newPxUsd,omitempty"`
	// Modify options orders based on implied volatility, where 1 represents 100%   Only applicable to options.   When modifying options orders, users can only fill in one of the following: newPx, newPxUsd, or newPxVol.
	NewPxVol *string `json:"newPxVol,omitempty"`
	// New quantity after amendment and it has to be larger than 0. When amending a partially-filled order, the `newSz` should include the amount that has been filled.
	NewSz *string `json:"newSz,omitempty"`
	// Order ID    Either `ordId` or `clOrdId` is required. If both are passed, `ordId` will be used.
	OrdId *string `json:"ordId,omitempty"`
	// Client Request ID as assigned by the client for order amendment   A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.   The response will include the corresponding `reqId` to help you identify the request if you provide it in the request.
	ReqId *string `json:"reqId,omitempty"`
}

type _CreateTradeAmendOrderV5Req CreateTradeAmendOrderV5Req

// NewCreateTradeAmendOrderV5Req instantiates a new CreateTradeAmendOrderV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeAmendOrderV5Req(instId string) *CreateTradeAmendOrderV5Req {
	this := CreateTradeAmendOrderV5Req{}
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	this.InstId = instId
	var newPx string = ""
	this.NewPx = &newPx
	var newPxUsd string = ""
	this.NewPxUsd = &newPxUsd
	var newPxVol string = ""
	this.NewPxVol = &newPxVol
	var newSz string = ""
	this.NewSz = &newSz
	var ordId string = ""
	this.OrdId = &ordId
	var reqId string = ""
	this.ReqId = &reqId
	return &this
}

// NewCreateTradeAmendOrderV5ReqWithDefaults instantiates a new CreateTradeAmendOrderV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeAmendOrderV5ReqWithDefaults() *CreateTradeAmendOrderV5Req {
	this := CreateTradeAmendOrderV5Req{}
	var clOrdId string = ""
	this.ClOrdId = &clOrdId
	var instId string = ""
	this.InstId = instId
	var newPx string = ""
	this.NewPx = &newPx
	var newPxUsd string = ""
	this.NewPxUsd = &newPxUsd
	var newPxVol string = ""
	this.NewPxVol = &newPxVol
	var newSz string = ""
	this.NewSz = &newSz
	var ordId string = ""
	this.OrdId = &ordId
	var reqId string = ""
	this.ReqId = &reqId
	return &this
}

// GetAttachAlgoOrds returns the AttachAlgoOrds field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetAttachAlgoOrds() []CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner {
	if o == nil || IsNil(o.AttachAlgoOrds) {
		var ret []CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner
		return ret
	}
	return o.AttachAlgoOrds
}

// GetAttachAlgoOrdsOk returns a tuple with the AttachAlgoOrds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetAttachAlgoOrdsOk() ([]CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner, bool) {
	if o == nil || IsNil(o.AttachAlgoOrds) {
		return nil, false
	}
	return o.AttachAlgoOrds, true
}

// HasAttachAlgoOrds returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasAttachAlgoOrds() bool {
	if o != nil && !IsNil(o.AttachAlgoOrds) {
		return true
	}

	return false
}

// SetAttachAlgoOrds gets a reference to the given []CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner and assigns it to the AttachAlgoOrds field.
func (o *CreateTradeAmendOrderV5Req) SetAttachAlgoOrds(v []CreateTradeAmendBatchOrdersV5ReqAttachAlgoOrdsInner) {
	o.AttachAlgoOrds = v
}

// GetClOrdId returns the ClOrdId field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetClOrdId() string {
	if o == nil || IsNil(o.ClOrdId) {
		var ret string
		return ret
	}
	return *o.ClOrdId
}

// GetClOrdIdOk returns a tuple with the ClOrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetClOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClOrdId) {
		return nil, false
	}
	return o.ClOrdId, true
}

// HasClOrdId returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasClOrdId() bool {
	if o != nil && !IsNil(o.ClOrdId) {
		return true
	}

	return false
}

// SetClOrdId gets a reference to the given string and assigns it to the ClOrdId field.
func (o *CreateTradeAmendOrderV5Req) SetClOrdId(v string) {
	o.ClOrdId = &v
}

// GetCxlOnFail returns the CxlOnFail field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetCxlOnFail() bool {
	if o == nil || IsNil(o.CxlOnFail) {
		var ret bool
		return ret
	}
	return *o.CxlOnFail
}

// GetCxlOnFailOk returns a tuple with the CxlOnFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetCxlOnFailOk() (*bool, bool) {
	if o == nil || IsNil(o.CxlOnFail) {
		return nil, false
	}
	return o.CxlOnFail, true
}

// HasCxlOnFail returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasCxlOnFail() bool {
	if o != nil && !IsNil(o.CxlOnFail) {
		return true
	}

	return false
}

// SetCxlOnFail gets a reference to the given bool and assigns it to the CxlOnFail field.
func (o *CreateTradeAmendOrderV5Req) SetCxlOnFail(v bool) {
	o.CxlOnFail = &v
}

// GetInstId returns the InstId field value
func (o *CreateTradeAmendOrderV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradeAmendOrderV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetNewPx returns the NewPx field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetNewPx() string {
	if o == nil || IsNil(o.NewPx) {
		var ret string
		return ret
	}
	return *o.NewPx
}

// GetNewPxOk returns a tuple with the NewPx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetNewPxOk() (*string, bool) {
	if o == nil || IsNil(o.NewPx) {
		return nil, false
	}
	return o.NewPx, true
}

// HasNewPx returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasNewPx() bool {
	if o != nil && !IsNil(o.NewPx) {
		return true
	}

	return false
}

// SetNewPx gets a reference to the given string and assigns it to the NewPx field.
func (o *CreateTradeAmendOrderV5Req) SetNewPx(v string) {
	o.NewPx = &v
}

// GetNewPxUsd returns the NewPxUsd field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetNewPxUsd() string {
	if o == nil || IsNil(o.NewPxUsd) {
		var ret string
		return ret
	}
	return *o.NewPxUsd
}

// GetNewPxUsdOk returns a tuple with the NewPxUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetNewPxUsdOk() (*string, bool) {
	if o == nil || IsNil(o.NewPxUsd) {
		return nil, false
	}
	return o.NewPxUsd, true
}

// HasNewPxUsd returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasNewPxUsd() bool {
	if o != nil && !IsNil(o.NewPxUsd) {
		return true
	}

	return false
}

// SetNewPxUsd gets a reference to the given string and assigns it to the NewPxUsd field.
func (o *CreateTradeAmendOrderV5Req) SetNewPxUsd(v string) {
	o.NewPxUsd = &v
}

// GetNewPxVol returns the NewPxVol field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetNewPxVol() string {
	if o == nil || IsNil(o.NewPxVol) {
		var ret string
		return ret
	}
	return *o.NewPxVol
}

// GetNewPxVolOk returns a tuple with the NewPxVol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetNewPxVolOk() (*string, bool) {
	if o == nil || IsNil(o.NewPxVol) {
		return nil, false
	}
	return o.NewPxVol, true
}

// HasNewPxVol returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasNewPxVol() bool {
	if o != nil && !IsNil(o.NewPxVol) {
		return true
	}

	return false
}

// SetNewPxVol gets a reference to the given string and assigns it to the NewPxVol field.
func (o *CreateTradeAmendOrderV5Req) SetNewPxVol(v string) {
	o.NewPxVol = &v
}

// GetNewSz returns the NewSz field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetNewSz() string {
	if o == nil || IsNil(o.NewSz) {
		var ret string
		return ret
	}
	return *o.NewSz
}

// GetNewSzOk returns a tuple with the NewSz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetNewSzOk() (*string, bool) {
	if o == nil || IsNil(o.NewSz) {
		return nil, false
	}
	return o.NewSz, true
}

// HasNewSz returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasNewSz() bool {
	if o != nil && !IsNil(o.NewSz) {
		return true
	}

	return false
}

// SetNewSz gets a reference to the given string and assigns it to the NewSz field.
func (o *CreateTradeAmendOrderV5Req) SetNewSz(v string) {
	o.NewSz = &v
}

// GetOrdId returns the OrdId field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetOrdId() string {
	if o == nil || IsNil(o.OrdId) {
		var ret string
		return ret
	}
	return *o.OrdId
}

// GetOrdIdOk returns a tuple with the OrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrdId) {
		return nil, false
	}
	return o.OrdId, true
}

// HasOrdId returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasOrdId() bool {
	if o != nil && !IsNil(o.OrdId) {
		return true
	}

	return false
}

// SetOrdId gets a reference to the given string and assigns it to the OrdId field.
func (o *CreateTradeAmendOrderV5Req) SetOrdId(v string) {
	o.OrdId = &v
}

// GetReqId returns the ReqId field value if set, zero value otherwise.
func (o *CreateTradeAmendOrderV5Req) GetReqId() string {
	if o == nil || IsNil(o.ReqId) {
		var ret string
		return ret
	}
	return *o.ReqId
}

// GetReqIdOk returns a tuple with the ReqId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeAmendOrderV5Req) GetReqIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReqId) {
		return nil, false
	}
	return o.ReqId, true
}

// HasReqId returns a boolean if a field has been set.
func (o *CreateTradeAmendOrderV5Req) HasReqId() bool {
	if o != nil && !IsNil(o.ReqId) {
		return true
	}

	return false
}

// SetReqId gets a reference to the given string and assigns it to the ReqId field.
func (o *CreateTradeAmendOrderV5Req) SetReqId(v string) {
	o.ReqId = &v
}

func (o CreateTradeAmendOrderV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeAmendOrderV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachAlgoOrds) {
		toSerialize["attachAlgoOrds"] = o.AttachAlgoOrds
	}
	if !IsNil(o.ClOrdId) {
		toSerialize["clOrdId"] = o.ClOrdId
	}
	if !IsNil(o.CxlOnFail) {
		toSerialize["cxlOnFail"] = o.CxlOnFail
	}
	toSerialize["instId"] = o.InstId
	if !IsNil(o.NewPx) {
		toSerialize["newPx"] = o.NewPx
	}
	if !IsNil(o.NewPxUsd) {
		toSerialize["newPxUsd"] = o.NewPxUsd
	}
	if !IsNil(o.NewPxVol) {
		toSerialize["newPxVol"] = o.NewPxVol
	}
	if !IsNil(o.NewSz) {
		toSerialize["newSz"] = o.NewSz
	}
	if !IsNil(o.OrdId) {
		toSerialize["ordId"] = o.OrdId
	}
	if !IsNil(o.ReqId) {
		toSerialize["reqId"] = o.ReqId
	}
	return toSerialize, nil
}

func (o *CreateTradeAmendOrderV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeAmendOrderV5Req := _CreateTradeAmendOrderV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeAmendOrderV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeAmendOrderV5Req(varCreateTradeAmendOrderV5Req)

	return err
}

type NullableCreateTradeAmendOrderV5Req struct {
	value *CreateTradeAmendOrderV5Req
	isSet bool
}

func (v NullableCreateTradeAmendOrderV5Req) Get() *CreateTradeAmendOrderV5Req {
	return v.value
}

func (v *NullableCreateTradeAmendOrderV5Req) Set(val *CreateTradeAmendOrderV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeAmendOrderV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeAmendOrderV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeAmendOrderV5Req(val *CreateTradeAmendOrderV5Req) *NullableCreateTradeAmendOrderV5Req {
	return &NullableCreateTradeAmendOrderV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeAmendOrderV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeAmendOrderV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


