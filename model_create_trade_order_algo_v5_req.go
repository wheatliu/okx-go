/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTradeOrderAlgoV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTradeOrderAlgoV5Req{}

// CreateTradeOrderAlgoV5Req struct for CreateTradeOrderAlgoV5Req
type CreateTradeOrderAlgoV5Req struct {
	// Client-supplied Algo ID  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
	AlgoClOrdId *string `json:"algoClOrdId,omitempty"`
	// Margin currency   Applicable to all `isolated` `MARGIN` orders and `cross` `MARGIN` orders in `Spot and futures mode`.
	Ccy *string `json:"ccy,omitempty"`
	// Fraction of position to be closed when the algo order is triggered.   Currently the system supports fully closing the position only so the only accepted value is `1`. For the same position, only one TPSL pending order for fully closing the position is supported.   This is only applicable to `FUTURES` or `SWAP` instruments.  If `posSide` is `net`, `reduceOnly` must be `true`.  This is only applicable if `ordType` is `conditional` or `oco`.  This is only applicable if the stop loss and take profit order is executed as market order.  This is not supported in Portfolio Margin mode.  Either `sz` or `closeFraction` is required.
	CloseFraction *string `json:"closeFraction,omitempty"`
	// Instrument ID, e.g. `BTC-USDT`
	InstId string `json:"instId"`
	// Order type    `conditional`: One-way stop order  `oco`: One-cancels-the-other order  `chase`: chase order, only applicable to FUTURES and SWAP  `trigger`: Trigger order  `move_order_stop`: Trailing order  `twap`: TWAP order
	OrdType string `json:"ordType"`
	// Position side   Required in `long/short` mode and only be `long` or `short`
	PosSide *string `json:"posSide,omitempty"`
	// Order side, `buy` `sell`
	Side string `json:"side"`
	// Quantity to buy or sell  Either `sz` or `closeFraction` is required.
	Sz *string `json:"sz,omitempty"`
	// Order tag    A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
	Tag *string `json:"tag,omitempty"`
	// Trade mode  Margin mode `cross` `isolated`  Non-Margin mode `cash`  `spot_isolated` (only applicable to SPOT lead trading)
	TdMode string `json:"tdMode"`
	// Order quantity unit setting for `sz`  `base_ccy`: Base currency ,`quote_ccy`: Quote currency    Only applicable to `SPOT` traded with Market buy `conditional` order  Default is `quote_ccy` for buy, `base_ccy` for sell
	TgtCcy *string `json:"tgtCcy,omitempty"`
}

type _CreateTradeOrderAlgoV5Req CreateTradeOrderAlgoV5Req

// NewCreateTradeOrderAlgoV5Req instantiates a new CreateTradeOrderAlgoV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTradeOrderAlgoV5Req(instId string, ordType string, side string, tdMode string) *CreateTradeOrderAlgoV5Req {
	this := CreateTradeOrderAlgoV5Req{}
	var algoClOrdId string = ""
	this.AlgoClOrdId = &algoClOrdId
	var ccy string = ""
	this.Ccy = &ccy
	var closeFraction string = ""
	this.CloseFraction = &closeFraction
	this.InstId = instId
	this.OrdType = ordType
	var posSide string = ""
	this.PosSide = &posSide
	this.Side = side
	var sz string = ""
	this.Sz = &sz
	var tag string = ""
	this.Tag = &tag
	this.TdMode = tdMode
	var tgtCcy string = ""
	this.TgtCcy = &tgtCcy
	return &this
}

// NewCreateTradeOrderAlgoV5ReqWithDefaults instantiates a new CreateTradeOrderAlgoV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTradeOrderAlgoV5ReqWithDefaults() *CreateTradeOrderAlgoV5Req {
	this := CreateTradeOrderAlgoV5Req{}
	var algoClOrdId string = ""
	this.AlgoClOrdId = &algoClOrdId
	var ccy string = ""
	this.Ccy = &ccy
	var closeFraction string = ""
	this.CloseFraction = &closeFraction
	var instId string = ""
	this.InstId = instId
	var ordType string = ""
	this.OrdType = ordType
	var posSide string = ""
	this.PosSide = &posSide
	var side string = ""
	this.Side = side
	var sz string = ""
	this.Sz = &sz
	var tag string = ""
	this.Tag = &tag
	var tdMode string = ""
	this.TdMode = tdMode
	var tgtCcy string = ""
	this.TgtCcy = &tgtCcy
	return &this
}

// GetAlgoClOrdId returns the AlgoClOrdId field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetAlgoClOrdId() string {
	if o == nil || IsNil(o.AlgoClOrdId) {
		var ret string
		return ret
	}
	return *o.AlgoClOrdId
}

// GetAlgoClOrdIdOk returns a tuple with the AlgoClOrdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetAlgoClOrdIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlgoClOrdId) {
		return nil, false
	}
	return o.AlgoClOrdId, true
}

// HasAlgoClOrdId returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasAlgoClOrdId() bool {
	if o != nil && !IsNil(o.AlgoClOrdId) {
		return true
	}

	return false
}

// SetAlgoClOrdId gets a reference to the given string and assigns it to the AlgoClOrdId field.
func (o *CreateTradeOrderAlgoV5Req) SetAlgoClOrdId(v string) {
	o.AlgoClOrdId = &v
}

// GetCcy returns the Ccy field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetCcy() string {
	if o == nil || IsNil(o.Ccy) {
		var ret string
		return ret
	}
	return *o.Ccy
}

// GetCcyOk returns a tuple with the Ccy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetCcyOk() (*string, bool) {
	if o == nil || IsNil(o.Ccy) {
		return nil, false
	}
	return o.Ccy, true
}

// HasCcy returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasCcy() bool {
	if o != nil && !IsNil(o.Ccy) {
		return true
	}

	return false
}

// SetCcy gets a reference to the given string and assigns it to the Ccy field.
func (o *CreateTradeOrderAlgoV5Req) SetCcy(v string) {
	o.Ccy = &v
}

// GetCloseFraction returns the CloseFraction field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetCloseFraction() string {
	if o == nil || IsNil(o.CloseFraction) {
		var ret string
		return ret
	}
	return *o.CloseFraction
}

// GetCloseFractionOk returns a tuple with the CloseFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetCloseFractionOk() (*string, bool) {
	if o == nil || IsNil(o.CloseFraction) {
		return nil, false
	}
	return o.CloseFraction, true
}

// HasCloseFraction returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasCloseFraction() bool {
	if o != nil && !IsNil(o.CloseFraction) {
		return true
	}

	return false
}

// SetCloseFraction gets a reference to the given string and assigns it to the CloseFraction field.
func (o *CreateTradeOrderAlgoV5Req) SetCloseFraction(v string) {
	o.CloseFraction = &v
}

// GetInstId returns the InstId field value
func (o *CreateTradeOrderAlgoV5Req) GetInstId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetInstIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstId, true
}

// SetInstId sets field value
func (o *CreateTradeOrderAlgoV5Req) SetInstId(v string) {
	o.InstId = v
}

// GetOrdType returns the OrdType field value
func (o *CreateTradeOrderAlgoV5Req) GetOrdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrdType
}

// GetOrdTypeOk returns a tuple with the OrdType field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetOrdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrdType, true
}

// SetOrdType sets field value
func (o *CreateTradeOrderAlgoV5Req) SetOrdType(v string) {
	o.OrdType = v
}

// GetPosSide returns the PosSide field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetPosSide() string {
	if o == nil || IsNil(o.PosSide) {
		var ret string
		return ret
	}
	return *o.PosSide
}

// GetPosSideOk returns a tuple with the PosSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetPosSideOk() (*string, bool) {
	if o == nil || IsNil(o.PosSide) {
		return nil, false
	}
	return o.PosSide, true
}

// HasPosSide returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasPosSide() bool {
	if o != nil && !IsNil(o.PosSide) {
		return true
	}

	return false
}

// SetPosSide gets a reference to the given string and assigns it to the PosSide field.
func (o *CreateTradeOrderAlgoV5Req) SetPosSide(v string) {
	o.PosSide = &v
}

// GetSide returns the Side field value
func (o *CreateTradeOrderAlgoV5Req) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *CreateTradeOrderAlgoV5Req) SetSide(v string) {
	o.Side = v
}

// GetSz returns the Sz field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetSz() string {
	if o == nil || IsNil(o.Sz) {
		var ret string
		return ret
	}
	return *o.Sz
}

// GetSzOk returns a tuple with the Sz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetSzOk() (*string, bool) {
	if o == nil || IsNil(o.Sz) {
		return nil, false
	}
	return o.Sz, true
}

// HasSz returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasSz() bool {
	if o != nil && !IsNil(o.Sz) {
		return true
	}

	return false
}

// SetSz gets a reference to the given string and assigns it to the Sz field.
func (o *CreateTradeOrderAlgoV5Req) SetSz(v string) {
	o.Sz = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateTradeOrderAlgoV5Req) SetTag(v string) {
	o.Tag = &v
}

// GetTdMode returns the TdMode field value
func (o *CreateTradeOrderAlgoV5Req) GetTdMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TdMode
}

// GetTdModeOk returns a tuple with the TdMode field value
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetTdModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TdMode, true
}

// SetTdMode sets field value
func (o *CreateTradeOrderAlgoV5Req) SetTdMode(v string) {
	o.TdMode = v
}

// GetTgtCcy returns the TgtCcy field value if set, zero value otherwise.
func (o *CreateTradeOrderAlgoV5Req) GetTgtCcy() string {
	if o == nil || IsNil(o.TgtCcy) {
		var ret string
		return ret
	}
	return *o.TgtCcy
}

// GetTgtCcyOk returns a tuple with the TgtCcy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTradeOrderAlgoV5Req) GetTgtCcyOk() (*string, bool) {
	if o == nil || IsNil(o.TgtCcy) {
		return nil, false
	}
	return o.TgtCcy, true
}

// HasTgtCcy returns a boolean if a field has been set.
func (o *CreateTradeOrderAlgoV5Req) HasTgtCcy() bool {
	if o != nil && !IsNil(o.TgtCcy) {
		return true
	}

	return false
}

// SetTgtCcy gets a reference to the given string and assigns it to the TgtCcy field.
func (o *CreateTradeOrderAlgoV5Req) SetTgtCcy(v string) {
	o.TgtCcy = &v
}

func (o CreateTradeOrderAlgoV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTradeOrderAlgoV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlgoClOrdId) {
		toSerialize["algoClOrdId"] = o.AlgoClOrdId
	}
	if !IsNil(o.Ccy) {
		toSerialize["ccy"] = o.Ccy
	}
	if !IsNil(o.CloseFraction) {
		toSerialize["closeFraction"] = o.CloseFraction
	}
	toSerialize["instId"] = o.InstId
	toSerialize["ordType"] = o.OrdType
	if !IsNil(o.PosSide) {
		toSerialize["posSide"] = o.PosSide
	}
	toSerialize["side"] = o.Side
	if !IsNil(o.Sz) {
		toSerialize["sz"] = o.Sz
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["tdMode"] = o.TdMode
	if !IsNil(o.TgtCcy) {
		toSerialize["tgtCcy"] = o.TgtCcy
	}
	return toSerialize, nil
}

func (o *CreateTradeOrderAlgoV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instId",
		"ordType",
		"side",
		"tdMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTradeOrderAlgoV5Req := _CreateTradeOrderAlgoV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTradeOrderAlgoV5Req)

	if err != nil {
		return err
	}

	*o = CreateTradeOrderAlgoV5Req(varCreateTradeOrderAlgoV5Req)

	return err
}

type NullableCreateTradeOrderAlgoV5Req struct {
	value *CreateTradeOrderAlgoV5Req
	isSet bool
}

func (v NullableCreateTradeOrderAlgoV5Req) Get() *CreateTradeOrderAlgoV5Req {
	return v.value
}

func (v *NullableCreateTradeOrderAlgoV5Req) Set(val *CreateTradeOrderAlgoV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTradeOrderAlgoV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTradeOrderAlgoV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTradeOrderAlgoV5Req(val *CreateTradeOrderAlgoV5Req) *NullableCreateTradeOrderAlgoV5Req {
	return &NullableCreateTradeOrderAlgoV5Req{value: val, isSet: true}
}

func (v NullableCreateTradeOrderAlgoV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTradeOrderAlgoV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


