/*
Okx Rest API

OpenAPI specification for Okx cryptocurrency exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRfqMmpConfigV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRfqMmpConfigV5Req{}

// CreateRfqMmpConfigV5Req struct for CreateRfqMmpConfigV5Req
type CreateRfqMmpConfigV5Req struct {
	// Limit in number of execution attempts.
	CountLimit string `json:"countLimit"`
	// Frozen period (ms).   \"0\" means the trade will remain frozen until you request \"Reset MMP Status\" to unfrozen.
	FrozenInterval string `json:"frozenInterval"`
	// Time window (ms). MMP interval where monitoring is done.  \"0\" means disable MMP. Maximum time interval is 600,000.
	TimeInterval string `json:"timeInterval"`
}

type _CreateRfqMmpConfigV5Req CreateRfqMmpConfigV5Req

// NewCreateRfqMmpConfigV5Req instantiates a new CreateRfqMmpConfigV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRfqMmpConfigV5Req(countLimit string, frozenInterval string, timeInterval string) *CreateRfqMmpConfigV5Req {
	this := CreateRfqMmpConfigV5Req{}
	this.CountLimit = countLimit
	this.FrozenInterval = frozenInterval
	this.TimeInterval = timeInterval
	return &this
}

// NewCreateRfqMmpConfigV5ReqWithDefaults instantiates a new CreateRfqMmpConfigV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRfqMmpConfigV5ReqWithDefaults() *CreateRfqMmpConfigV5Req {
	this := CreateRfqMmpConfigV5Req{}
	var countLimit string = ""
	this.CountLimit = countLimit
	var frozenInterval string = ""
	this.FrozenInterval = frozenInterval
	var timeInterval string = ""
	this.TimeInterval = timeInterval
	return &this
}

// GetCountLimit returns the CountLimit field value
func (o *CreateRfqMmpConfigV5Req) GetCountLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountLimit
}

// GetCountLimitOk returns a tuple with the CountLimit field value
// and a boolean to check if the value has been set.
func (o *CreateRfqMmpConfigV5Req) GetCountLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountLimit, true
}

// SetCountLimit sets field value
func (o *CreateRfqMmpConfigV5Req) SetCountLimit(v string) {
	o.CountLimit = v
}

// GetFrozenInterval returns the FrozenInterval field value
func (o *CreateRfqMmpConfigV5Req) GetFrozenInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FrozenInterval
}

// GetFrozenIntervalOk returns a tuple with the FrozenInterval field value
// and a boolean to check if the value has been set.
func (o *CreateRfqMmpConfigV5Req) GetFrozenIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrozenInterval, true
}

// SetFrozenInterval sets field value
func (o *CreateRfqMmpConfigV5Req) SetFrozenInterval(v string) {
	o.FrozenInterval = v
}

// GetTimeInterval returns the TimeInterval field value
func (o *CreateRfqMmpConfigV5Req) GetTimeInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value
// and a boolean to check if the value has been set.
func (o *CreateRfqMmpConfigV5Req) GetTimeIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeInterval, true
}

// SetTimeInterval sets field value
func (o *CreateRfqMmpConfigV5Req) SetTimeInterval(v string) {
	o.TimeInterval = v
}

func (o CreateRfqMmpConfigV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRfqMmpConfigV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countLimit"] = o.CountLimit
	toSerialize["frozenInterval"] = o.FrozenInterval
	toSerialize["timeInterval"] = o.TimeInterval
	return toSerialize, nil
}

func (o *CreateRfqMmpConfigV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countLimit",
		"frozenInterval",
		"timeInterval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRfqMmpConfigV5Req := _CreateRfqMmpConfigV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRfqMmpConfigV5Req)

	if err != nil {
		return err
	}

	*o = CreateRfqMmpConfigV5Req(varCreateRfqMmpConfigV5Req)

	return err
}

type NullableCreateRfqMmpConfigV5Req struct {
	value *CreateRfqMmpConfigV5Req
	isSet bool
}

func (v NullableCreateRfqMmpConfigV5Req) Get() *CreateRfqMmpConfigV5Req {
	return v.value
}

func (v *NullableCreateRfqMmpConfigV5Req) Set(val *CreateRfqMmpConfigV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRfqMmpConfigV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRfqMmpConfigV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRfqMmpConfigV5Req(val *CreateRfqMmpConfigV5Req) *NullableCreateRfqMmpConfigV5Req {
	return &NullableCreateRfqMmpConfigV5Req{value: val, isSet: true}
}

func (v NullableCreateRfqMmpConfigV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRfqMmpConfigV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


