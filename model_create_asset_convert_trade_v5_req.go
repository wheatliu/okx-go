/*
OKX v5 API

OpenAPI specification for Okx exchange - Rest API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateAssetConvertTradeV5Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetConvertTradeV5Req{}

// CreateAssetConvertTradeV5Req struct for CreateAssetConvertTradeV5Req
type CreateAssetConvertTradeV5Req struct {
	// Base currency, e.g. `BTC` in `BTC-USDT`
	BaseCcy string `json:"baseCcy"`
	// Client Order ID as assigned by the client  A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
	ClTReqId *string `json:"clTReqId,omitempty"`
	// Quote currency, e.g. `USDT` in `BTC-USDT`
	QuoteCcy string `json:"quoteCcy"`
	// Quote ID
	QuoteId string `json:"quoteId"`
	// Trade side based on `baseCcy`  `buy` `sell`
	Side string `json:"side"`
	// Quote amount  The quote amount should no more then RFQ amount
	Sz string `json:"sz"`
	// Quote currency
	SzCcy string `json:"szCcy"`
	// Order tag  Applicable to broker user
	Tag *string `json:"tag,omitempty"`
}

type _CreateAssetConvertTradeV5Req CreateAssetConvertTradeV5Req

// NewCreateAssetConvertTradeV5Req instantiates a new CreateAssetConvertTradeV5Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetConvertTradeV5Req(baseCcy string, quoteCcy string, quoteId string, side string, sz string, szCcy string) *CreateAssetConvertTradeV5Req {
	this := CreateAssetConvertTradeV5Req{}
	this.BaseCcy = baseCcy
	var clTReqId string = ""
	this.ClTReqId = &clTReqId
	this.QuoteCcy = quoteCcy
	this.QuoteId = quoteId
	this.Side = side
	this.Sz = sz
	this.SzCcy = szCcy
	var tag string = ""
	this.Tag = &tag
	return &this
}

// NewCreateAssetConvertTradeV5ReqWithDefaults instantiates a new CreateAssetConvertTradeV5Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetConvertTradeV5ReqWithDefaults() *CreateAssetConvertTradeV5Req {
	this := CreateAssetConvertTradeV5Req{}
	var baseCcy string = ""
	this.BaseCcy = baseCcy
	var clTReqId string = ""
	this.ClTReqId = &clTReqId
	var quoteCcy string = ""
	this.QuoteCcy = quoteCcy
	var quoteId string = ""
	this.QuoteId = quoteId
	var side string = ""
	this.Side = side
	var sz string = ""
	this.Sz = sz
	var szCcy string = ""
	this.SzCcy = szCcy
	var tag string = ""
	this.Tag = &tag
	return &this
}

// GetBaseCcy returns the BaseCcy field value
func (o *CreateAssetConvertTradeV5Req) GetBaseCcy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseCcy
}

// GetBaseCcyOk returns a tuple with the BaseCcy field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetBaseCcyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCcy, true
}

// SetBaseCcy sets field value
func (o *CreateAssetConvertTradeV5Req) SetBaseCcy(v string) {
	o.BaseCcy = v
}

// GetClTReqId returns the ClTReqId field value if set, zero value otherwise.
func (o *CreateAssetConvertTradeV5Req) GetClTReqId() string {
	if o == nil || IsNil(o.ClTReqId) {
		var ret string
		return ret
	}
	return *o.ClTReqId
}

// GetClTReqIdOk returns a tuple with the ClTReqId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetClTReqIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClTReqId) {
		return nil, false
	}
	return o.ClTReqId, true
}

// HasClTReqId returns a boolean if a field has been set.
func (o *CreateAssetConvertTradeV5Req) HasClTReqId() bool {
	if o != nil && !IsNil(o.ClTReqId) {
		return true
	}

	return false
}

// SetClTReqId gets a reference to the given string and assigns it to the ClTReqId field.
func (o *CreateAssetConvertTradeV5Req) SetClTReqId(v string) {
	o.ClTReqId = &v
}

// GetQuoteCcy returns the QuoteCcy field value
func (o *CreateAssetConvertTradeV5Req) GetQuoteCcy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteCcy
}

// GetQuoteCcyOk returns a tuple with the QuoteCcy field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetQuoteCcyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteCcy, true
}

// SetQuoteCcy sets field value
func (o *CreateAssetConvertTradeV5Req) SetQuoteCcy(v string) {
	o.QuoteCcy = v
}

// GetQuoteId returns the QuoteId field value
func (o *CreateAssetConvertTradeV5Req) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *CreateAssetConvertTradeV5Req) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetSide returns the Side field value
func (o *CreateAssetConvertTradeV5Req) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *CreateAssetConvertTradeV5Req) SetSide(v string) {
	o.Side = v
}

// GetSz returns the Sz field value
func (o *CreateAssetConvertTradeV5Req) GetSz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sz
}

// GetSzOk returns a tuple with the Sz field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetSzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sz, true
}

// SetSz sets field value
func (o *CreateAssetConvertTradeV5Req) SetSz(v string) {
	o.Sz = v
}

// GetSzCcy returns the SzCcy field value
func (o *CreateAssetConvertTradeV5Req) GetSzCcy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SzCcy
}

// GetSzCcyOk returns a tuple with the SzCcy field value
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetSzCcyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SzCcy, true
}

// SetSzCcy sets field value
func (o *CreateAssetConvertTradeV5Req) SetSzCcy(v string) {
	o.SzCcy = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreateAssetConvertTradeV5Req) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetConvertTradeV5Req) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreateAssetConvertTradeV5Req) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreateAssetConvertTradeV5Req) SetTag(v string) {
	o.Tag = &v
}

func (o CreateAssetConvertTradeV5Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetConvertTradeV5Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["baseCcy"] = o.BaseCcy
	if !IsNil(o.ClTReqId) {
		toSerialize["clTReqId"] = o.ClTReqId
	}
	toSerialize["quoteCcy"] = o.QuoteCcy
	toSerialize["quoteId"] = o.QuoteId
	toSerialize["side"] = o.Side
	toSerialize["sz"] = o.Sz
	toSerialize["szCcy"] = o.SzCcy
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *CreateAssetConvertTradeV5Req) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"baseCcy",
		"quoteCcy",
		"quoteId",
		"side",
		"sz",
		"szCcy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetConvertTradeV5Req := _CreateAssetConvertTradeV5Req{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAssetConvertTradeV5Req)

	if err != nil {
		return err
	}

	*o = CreateAssetConvertTradeV5Req(varCreateAssetConvertTradeV5Req)

	return err
}

type NullableCreateAssetConvertTradeV5Req struct {
	value *CreateAssetConvertTradeV5Req
	isSet bool
}

func (v NullableCreateAssetConvertTradeV5Req) Get() *CreateAssetConvertTradeV5Req {
	return v.value
}

func (v *NullableCreateAssetConvertTradeV5Req) Set(val *CreateAssetConvertTradeV5Req) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetConvertTradeV5Req) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetConvertTradeV5Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetConvertTradeV5Req(val *CreateAssetConvertTradeV5Req) *NullableCreateAssetConvertTradeV5Req {
	return &NullableCreateAssetConvertTradeV5Req{value: val, isSet: true}
}

func (v NullableCreateAssetConvertTradeV5Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetConvertTradeV5Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


